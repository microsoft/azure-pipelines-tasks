steps:

# Clean
- checkout: self
  clean: true

# Start collect diagnostics
- powershell: ./ci/start-collect-diagnostics.ps1
  displayName: Start collect diagnostics
  condition: and(succeeded(), ne(variables['build.reason'], 'PullRequest'), variables.task, variables.rollForward)

# Use node 8, npm 5
- task: NodeTool@0
  displayName: Use node 8
  inputs:
    versionSpec: "8.x"
  condition: and(succeeded(), ne(variables['build.reason'], 'PullRequest'), variables.task, variables.rollForward)

# npm install
- script: npm install
  displayName: npm install

# Verify min agent version demands
- script: |
    cd ci
    cd verifyMinAgentDemands
    npm install
    node index.js
  displayName: Verify all min agent demands are valid
  condition: and(succeeded(), ne(variables['build.reason'], 'PullRequest'), variables.task, variables.rollForward)

# Build
- script: node make.js build --task "$(task)"
  displayName: Build
  condition: and(succeeded(), ne(variables['build.reason'], 'PullRequest'), variables.task, variables.rollForward)

# Test
- script: node make.js test
  displayName: Run tests
  condition: and(succeeded(), ne(variables['build.reason'], 'PullRequest'), variables.task, variables.rollForward)
- script: node make.js testLegacy --task "$(task)"
  displayName: Legacy tests with node 6
  condition: and(succeeded(), ne(variables['build.reason'], 'PullRequest'), variables.task, variables.rollForward)

# Publish test results
- task: PublishTestResults@2
  displayName: Publish Test Results test-*.xml
  condition: and(succeeded(), ne(variables['build.reason'], 'PullRequest'), variables.task, variables.rollForward)
  inputs:
    testResultsFiles: 'test-*.xml'
    testRunTitle: 'Node 6 Test Results'
    searchFolder: '$(System.DefaultWorkingDirectory)/testresults'

# Only on Windows:
- ${{ if eq(parameters.os, 'Windows_NT') }}:

  # Stage tasks individually into the package directory
  - script: node ./ci/stage-package.js individually
    displayName: Stage tasks individually into the package directory
    condition: and(succeeded(), ne(variables['build.reason'], 'PullRequest'), variables.task, variables.rollForward)

  # Sign all task zips as nuget packages
  - template: sign-all-tasks.yml
    parameters:
      layoutRoot: $(Build.SourcesDirectory)\_package\tasks-layout

  # Stage all the tasks into a single zip for upload
  - script: node ./ci/stage-package.js
    displayName: Stage all the tasks into a single zip for upload
    condition: and(succeeded(), ne(variables['build.reason'], 'PullRequest'), variables.task, variables.rollForward)

# Set variables
- powershell: .\ci\set-publish-variables.ps1
  displayName: Set publish variables
  condition: and(succeeded(), ne(variables['build.reason'], 'PullRequest'), variables.task, variables.rollForward)

# Moving Package zip file to be consumed by Milestone staging task
- powershell: |
    mkdir $env:SYSTEM_ARTIFACTSDIRECTORY\package
    Copy-Item $(Build.SourcesDirectory)\_package\tasks.zip -Destination $env:SYSTEM_ARTIFACTSDIRECTORY\package\tasks.zip
    Write-Host "Copying from '$(Build.SourcesDirectory)\_package\tasks.zip' to '$env:SYSTEM_ARTIFACTSDIRECTORY\package\tasks.zip'"
  displayName: Move package zip file
  condition: and(succeeded(), ne(variables['build.reason'], 'PullRequest'), variables.task, variables.rollForward)

# Stage Milestone task
- script: node .\ci\stage-milestone.js
  displayName: Stage milestone
  condition: and(succeeded(), ne(variables['build.reason'], 'PullRequest'), variables.task, variables.rollForward)

# Stage per task NuGet package
- script: npm run package
  displayName: npm run package
  condition: and(succeeded(), ne(variables['build.reason'], 'PullRequest'), variables.task, variables.rollForward)

# Authenticate 
- task: NuGetAuthenticate@0
  displayName: 'Authenticate with nuget'
  condition: and(succeeded(), ne(variables['build.reason'], 'PullRequest'), variables.task, variables.rollForward)

# Push to feed
- script: |
    cd $(Build.SourcesDirectory)\_package\nuget-packages\$(task)
    push.cmd
  displayName: 'Push Nuget package'
  condition: and(succeeded(), ne(variables['build.reason'], 'PullRequest'), variables.task, variables.rollForward)

# Stop collect diagnostics
- powershell: ./ci/stop-collect-diagnostics.ps1
  displayName: Stop collect diagnostics
  condition: and(succeeded(), ne(variables['build.reason'], 'PullRequest'), variables.task, variables.rollForward)
