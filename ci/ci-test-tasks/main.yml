parameters:
- name: tasks
  displayName: Tasks to process (separate by colons, no whitespaces)
  type: string
  default: DownloadPackageV1

trigger: none
pr: none

jobs:
  - ${{ each task in split(parameters.tasks, ',') }}:
    - job: ${{ task }}_verify_testing_pipeline
      condition: eq(variables['build.reason'], 'Manual')
      displayName: Verify testing pipeline (${{ task }})
      pool:
        vmImage: windows-2022
      steps:
      - script: |
          npm install -g tfx-cli
        displayName: 'npm install -g tfx-cli' 
      - script: |
          tfx login --auth-type pat --service-url $(ADOUrl)/DefaultCollection --token $(ADOToken)
        displayName: 'tfx login' 
      - script: |
          echo "##vso[task.setvariable variable=TaskId;]$(node ./ci/ci-test-tasks/get-task-guid.js ./task-${{ parameters.task }}/${{parameters.task}}/task.json)"
          displayName: 'Set TaskId id' 
      - script: |
          echo $TaskId
          echo "Deleting task $TaskId"
          tfx build tasks delete --task-id $TaskId
        displayName: 'Delete task'   



      - script: npm install axios
        displayName: 'npm install axios'
      - script: |
          node ./ci/ci-test-tasks/verify-testing-pipeline-exist.js $(ADOToken) $(ADOUrl) ${{ task }}
        failOnStderr: true
        displayName: 'Verify test pipeline exist'
  
    - job: ${{ task }}_build_task
      dependsOn: ${{ task }}_verify_testing_pipeline
      displayName: Build Task (${{ task }})
      pool:
        vmImage: windows-2022
      steps:
      - template: ./build-task.yml
        parameters:
          task: ${{ task }}
          push: false
          publishArtifact: true
          patchVersion: true
          version: '0.9999.9999'

    - job: ${{ task }}_upload_task
      displayName: Upload (${{ task }})
      dependsOn: ${{ task }}_build_task
      pool:
        vmImage: windows-2022
      steps:
      - template: ./upload-task.yml
        parameters:
          task: ${{ task }}
   
    - job: ${{ task }}_test_task
      displayName: Test (${{ task }})
      dependsOn: ${{ task }}_upload_task
      pool:
        vmImage: windows-2022
      steps:
      - template: ./test-task.yml
        parameters:
          task: ${{ task }}
   
    - job: ${{ task }}_clean_up
      condition: in(dependencies.${{ task }}_upload_task.result, 'Succeeded', 'SucceededWithIssues', 'Failed')
      displayName: Clean up (${{ task }})
      dependsOn: ${{ task }}_test_task
      pool:
        vmImage: windows-2022
      steps:
      - template: ./clean-up-task.yml
        parameters:
          task: ${{ task }}
