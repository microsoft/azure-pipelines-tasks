parameters:
  os: ''

steps:

# Clean
- checkout: self
  clean: true

# Only when building on Windows:
- ${{ if eq(parameters.os, 'Windows_NT') }}:

  # Start collect diagnostics
  - powershell: ./ci/start-collect-diagnostics.ps1
    displayName: Start collect diagnostics
    condition: and(succeeded(), eq(variables.collect_diagnostics, 'true'))

# Use node 8, npm 5
- task: NodeTool@0
  displayName: Use node 8
  inputs:
    versionSpec: 8.x

- script: npm i -g npm@6.9.0 --force
  displayName: Use npm version 6.9.0

# npm install
- script: npm install
  displayName: npm install

# Verify min agent demands
- script: |
    cd ci/verifyMinAgentDemands
    npm install
  displayName: npm install min agent demands

- script: node ./ci/verifyMinAgentDemands/index.js
  displayName: Verify min agent demands

# Filter out unchanged tasks
- script: node ./ci/filter-tasks.js
  displayName: Filter out unchanged tasks
  env:
    PACKAGE_ENDPOINT: $(Package.Endpoint)
    PACKAGE_TOKEN: $(Package.Token)

# Build
- script: node make.js build --task "$(task_pattern)"
  displayName: Build
  condition: ne(variables['numTasks'], 0)

- script: node ./ci/check-tasks.js
  displayName: Check that tasks has no duplicated libs
  condition: and(succeeded(), eq(variables['build.reason'], 'PullRequest'), ne(variables['numTasks'], 0))

# Check diff for task sources
- script: node ./ci/verify-source-changes.js "$(task_pattern)"
  displayName: Verify task source changes
  condition: |
    and(
      succeeded(),
      ne(variables['Build.SourceBranch'], 'refs/heads/master'),     
      ne(variables['COURTESY_PUSH'], 'true'),
      ne(variables['numTasks'], 0)
    )
  
# Only on Windows:
- ${{ if eq(parameters.os, 'Windows_NT') }}:

  # Stage tasks individually into the package directory
  - script: node ./ci/stage-package.js false individually
    displayName: Stage tasks individually into the package directory
    condition: and(succeeded(), ne(variables['build.reason'], 'PullRequest'), ne(variables['numTasks'], 0))

  # Sign all task zips as nuget packages
  - template: sign-all-tasks.yml
    parameters:
      layoutRoot: $(Build.SourcesDirectory)\_package\tasks-layout

  # Stage all the tasks into a single zip for upload
  - script: node ./ci/stage-package.js false
    displayName: Stage all the tasks into a single zip for upload
    condition: and(succeeded(), ne(variables['build.reason'], 'PullRequest'), ne(variables['numTasks'], 0))

  # Publish artifact
  - task: PublishBuildArtifacts@1
    displayName: Publish package artifact
    condition: and(succeeded(), ne(variables['build.reason'], 'PullRequest'), ne(variables['numTasks'], 0))
    inputs:
      pathToPublish: _package/tasks.zip
      artifactName: package
      publishLocation: container

# Test
- script: node make.js test
  displayName: Run tests
  condition: ne(variables['numTasks'], 0)
- script: node make.js testLegacy --task "$(task_pattern)"
  displayName: Legacy tests with node 6
  condition: ne(variables['numTasks'], 0)

# Only when building on Windows:
- ${{ if eq(parameters.os, 'Windows_NT') }}:

  # Stop collect diagnostics
  - powershell: ./ci/stop-collect-diagnostics.ps1
    displayName: Stop collect diagnostics
    condition: and(always(), eq(variables.collect_diagnostics, 'true'), ne(variables['numTasks'], 0))

  - powershell: |
      # Build the release branch name
      $currentSprint = (Invoke-WebRequest https://whatsprintis.it/sprint -Headers @{"Accept"="application/json"} | ConvertFrom-Json).sprint
      $releaseBranch = "releases/m" + $currentSprint

      # add config entry to avoid errors while pulling
      git config --global user.email "$(username)@microsoft.com"
      git config --global user.name "$(username)"

      # Pull commits from remote and push branch to git
      git checkout -b $releaseBranch
      Write-Host 'Trying to pull the remote branch..'
      git pull https://$(GitHubPAT)@github.com/microsoft/azure-pipelines-tasks $releaseBranch
      if (-not $?) {
        Write-Host 'Failed to pull the remote branch. This is expected if the remote branch doesn't exist.
      }
      Write-Host 'Trying to push to the remote branch..'
      git push https://$(GitHubPAT)@github.com/microsoft/azure-pipelines-tasks $releaseBranch
    condition: |
      and(
        succeeded(),
        in(variables['build.reason'], 'Schedule', 'Manual'),
        eq(variables['COURTESY_PUSH'], 'true'),
        eq(variables['Build.SourceBranch'], 'refs/heads/master')
      )
    displayName: Push release branch
