<?xml version="1.0" encoding="utf-8"?>
<!--
This is the task definition file.

The file contains two parts: A list of the task definitions and a list of the script definitions.
  1. The list of the task definitions is defined by <TaskDefs> node, which contains zero or more
     task definition(s). A task is defined by <TaskDef> node, which is consisted by "name", "desc",
     "class" and "type" attributes. "name" and "desc" attribute specify the name and description of
     the task, respectively. The "class" specifies the full display name of the implementation class.
     The type specifies the interface the class implements. It should be one of the following:
     IDocumentTask, IDocument2DocumentTask, IFileRefTask, IFileRef2FileRefTask, IProjectTask, or
     IProject2ProjectTask. The type can be LocExtension as well, for LS 4.x based managed LocExtensions that 
     need to be run as an IDocumentTask.
     The following is a sample <TaskDef> node:

     <TaskDef name="SampleTask-doc"
         desc="SampleTask as DocTask"
         class="Microsoft.Localization.UnitTests.Tasks.SampleTask, BclUt, Version=6.0.0.0, Culture=neutral, PublicKeyToken=365143bb27e7ac8b"
         type="IDocumentTask" />

     The following is a sample <TaskDef> node for extensions:

    <TaskDef name="Verify Localization Rules"
        desc="Verify Localization Rules"
        class="Microsoft.Localization.Extensions.TPLocVerExtension.LocVerExtension, TPLocVerExtension, Version=2.0.0.0, Culture=neutral, PublicKeyToken=41594cd70afdd551"
        type="LocExtension" />

  2. The list of the script definitions is defined by <ScriptDefs> node, which contains zero or more
     script definition(s). A script is a grouping of Scripts/Tasks with optional execution parameters.
     It is defined by <ScriptDef> node, which is consisted by "name", "desc" and "type" attributes,
     and one or more <Action> node. The meaning of "name", "desc" and "type" attributes are the same as
     the <TaskDef> node. The <Action> node is basically a function-call to another script/task. The
     "name" attribute specifies the script/task being invoked. Notice that the script/task should be
     defined prior the use of it. The <Action> node can have the execution parameter, which is defined
     by the <Props> node as the property bag in the LocStudio. The property bag will be provided when
     the task is executed. The following is a sample <ScriptDef> node:

     <ScriptDef name="SampleScript-doc"
                desc="Sample document script."
                type="IDocumentTask">
         <Action name="SampleTask-doc1">
             <Props>
                 <Str Name="NewName" Val="ProcessedBy:SampleTask.Execute(doc1)" />
             </Props>
         </Action>
         <Action name="SampleTask-doc2">
             <Props>
                 <Str Name="NewName" Val="ProcessedBy:SampleTask.Execute(doc2)" />
             </Props>
         </Action>
     </ScriptDef>

     Few things you would want to know for the scripts:
     a. In a script, all the actions should have type compatible with the script type.
        IDocumentTask scripts can have: IDocumentTask actions.
        IDocument2DocumentTask scripts can have: IDocumentTask and IDocument2DocumentTask actions.
        IFileRefTask scripts can have: IDocumentTask and IFileRefTask actions.
        IFileRef2FileRefTask scripts can have: IDocumentTask, IDocument2DocumentTask, IFileRefTask and
                                               IFileRef2FileRefTask actions.
        IProjectTask scripts can have: IDocumentTask, IFileRefTask and IProjectTask actions.
        IProject2ProjectTask scripts can have all six types of actions.

        If the action is compatible but not the same type as the script, task wrapping will happen
        automatically. When wrapping a single object task to a two objcet task, ex: IProjectTask to
        IProject2ProjectTask, you can specify to run the single object task on which objects by
        having an execution parameter "AppliedTo". The value can be "Left", "Right" or "Both".
        "Left" means running the single object task against only the left (1st) object.
        "Right" means running the single object task against only the right (2nd) object.
        "Both" means running the single object task against both objects.
        The default value of "AppliedTo" is "Left" if it is not provided.
        Ex:

        <ScriptDef name="WrapDocAsDoc2DocTask-Left"
                   desc="Wrap the doc task to a doc2doc task"
                   type="IDocument2DocumentTask">
            <Action name="SingleDocTask">
                <Props>
                    <Str Name="AppliedTo" Val="Left" />
                </Props>
            </Action>
        </ScriptDef>

        When running the "WrapDocAsDoc2DocTask-Left", the "SingleDocTask" will be run against only
        the left document.

     b. If a <Action> node references a script, the execution parameter(s) will be passed to the
        implementation classes.
-->
<LocStudioTasks Version="6.0" xmlns="http://schemas.microsoft.com/locstudio/locstudio/2007/01/tasks">
    <TaskDefs>
        <TaskDef name="CheckCustomSyncTask"
            desc="Check if the projects being synced require custom sync."
            class="Microsoft.Localization.SyncTask.CheckCustomSyncTask, LSBLOM, Version=6.0.0.0, Culture=neutral, PublicKeyToken=A98254699FBC2EC8"
            type="IProject2ProjectTask" />
        <TaskDef name="LoadSettingsTask"
            desc="Loads the settings into memory."
            class="Microsoft.Localization.SyncTask.LoadSettingsTask, LSBLOM, Version=6.0.0.0, Culture=neutral, PublicKeyToken=A98254699FBC2EC8"
            type="IProjectTask" />
        <TaskDef name="SyncUpdateTask"
            desc="Updates two LocDocument for the Sync feature."
            class="Microsoft.Localization.SyncTask.SyncUpdateTask, LSBLOM, Version=6.0.0.0, Culture=neutral, PublicKeyToken=A98254699FBC2EC8"
            type="IDocument2DocumentTask" />
        <TaskDef name="ProjectPropertyBagMerge"
            desc="Merges the Project level PropertyBag elements."
            class="Microsoft.Localization.SyncTask.ProjectPropertyBagMerge, LSBLOM, Version=6.0.0.0, Culture=neutral, PublicKeyToken=A98254699FBC2EC8"
            type="IProject2ProjectTask" />
        <TaskDef name="LocFileRefPropertyBagMerge"
            desc="Merges the LocFileRef level PropertyBag elements."
            class="Microsoft.Localization.SyncTask.LocFileRefPropertyBagMerge, LSBLOM, Version=6.0.0.0, Culture=neutral, PublicKeyToken=A98254699FBC2EC8"
            type="IFileRef2FileRefTask" />
        <!--
    <TaskDef name="Resource Length Validation"
        desc="Validates the length of Resources' id and type"
        class="Microsoft.Localization.Extensions.TranslationPlatform.ResourceLenValidationExtension, ResourceLenValidationExtension"
        type="LocExtension" />
-->
        <TaskDef name="Verify Localization Rules"
            desc="Verify Localization Rules"
            class="Microsoft.Localization.Extensions.TPLocVerExtension.LocVerExtension, TPLocVerExtension, Version=2.0.0.0, Culture=neutral, PublicKeyToken=41594cd70afdd551"
            type="LocExtension" />
        <TaskDef name="False positive warning supress"
            desc="False positive warning supress"
            class="Microsoft.Localization.Extensions.WarningSupressExtension.WarningSupressor, WarningSupressExtension, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null"
            type="LocExtension" />
    </TaskDefs>
    <ScriptDefs>
        <ScriptDef name="Sync"
               desc="Sync two LCX Container files."
               type="IProject2ProjectTask">
            <Action name="CheckCustomSyncTask" />
            <Action name="LoadSettingsTask">
                <Props>
                    <Str Name="AppliedTo" Val="Left" />
                </Props>
            </Action>
            <Action name="SyncUpdateTask">
                <Props>
                    <Str Name="CommentList" Val="Dev,Rccx,LcxAdmin" />
                    <Str Name="PropertyBagList" Val="Custom1, Custom2, Custom3, Custom4, Custom5, Custom6" />
                </Props>
            </Action>
            <Action name="ProjectPropertyBagMerge">
                <!-- Replace the Test values with Product ones. -->
                <Props>
                    <Str Name="PropertyBagList" Val="TestVersion, TestOwner" />
                </Props>
            </Action>
            <Action name="LocFileRefPropertyBagMerge">
                <!--
        <Props>
          <Str Name="PropertyBagList" Val="Enter comma delimeted list." />
        </Props>
        -->
            </Action>
        </ScriptDef>
    </ScriptDefs>
</LocStudioTasks>

