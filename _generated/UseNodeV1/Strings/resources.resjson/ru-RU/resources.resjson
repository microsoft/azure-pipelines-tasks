{
  "loc.friendlyName": "Использовать экосистему Node.js",
  "loc.helpMarkDown": "",
  "loc.description": "Настройте среду Node.js и добавьте ее в PATH, дополнительно предоставив поддержку прокси",
  "loc.instanceNameFormat": "Использовать Node $(versionSpec)",
  "loc.input.label.version": "Версия",
  "loc.input.help.version": "Спецификация версии для используемой версии. Примеры: 10.x, 10.15.1, >=10.15.0",
  "loc.input.label.checkLatest": "Проверить наличие последней версии",
  "loc.input.help.checkLatest": "Всегда проверяет наличие в Интернете актуальной версии, соответствующей спецификатору версии. Обычно задано значение \"false\", кроме случаев, когда имеется определенный сценарий всегда получать актуальную версию. Когда практическая необходимость в этом отсутствует, особенно в случае размещенного пула сборок, может взиматься дополнительная плата за загрузку.",
  "loc.input.label.force32bit": "Использовать 32-разрядную версию на 64-разрядных агентах",
  "loc.input.help.force32bit": "Устанавливает 32-разрядную версию Node независимо от архитектуры ЦП агента.",
  "loc.input.label.retryCountOnDownloadFails": "Установите число повторных попыток при сбое скачивания узлов",
  "loc.input.help.retryCountOnDownloadFails": "Используйте этот параметр, если задаче не удалось скачать двоичные файлы узла с зеркала. Задача будет повторять попытку скачать двоичных файлов в течение указанного времени.",
  "loc.input.label.delayBetweenRetries": "Установите задержку между повторными попытками",
  "loc.input.help.delayBetweenRetries": "Используйте этот параметр, чтобы установить задержку между повторными попытками в миллисекундах. Значение по умолчанию — 1000 миллисекунд.",
  "loc.messages.ToolFailed": "Сбой установки Node: %s",
  "loc.messages.TryRosetta": "Не удалось найти Node для платформы %s и архитектуры %s. Попытка установки с помощью Rosetta2",
  "loc.messages.NodeVersionNotFound": "Не удалось найти версию Node %s для платформы %s и архитектуры %s.",
  "loc.messages.UnexpectedOS": "Непредвиденная ОС %s",
  "loc.messages.AgentTempDirNotSet": "Переменная Agent.TempDirectory должна быть задана."
}