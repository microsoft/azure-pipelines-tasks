{
  "loc.friendlyName": "Kubectl",
  "loc.helpMarkDown": "[Learn more about this task](https://go.microsoft.com/fwlink/?linkid=851275)",
  "loc.description": "Deploy, configure, update a Kubernetes cluster in Azure Container Service by running kubectl commands",
  "loc.instanceNameFormat": "kubectl $(command)",
  "loc.group.displayName.commands": "Commands",
  "loc.group.displayName.secrets": "Secrets",
  "loc.group.displayName.configMaps": "ConfigMaps",
  "loc.group.displayName.advanced": "Advanced",
  "loc.group.displayName.output": "Output",
  "loc.input.label.kubernetesServiceEndpoint": "Kubernetes service connection",
  "loc.input.help.kubernetesServiceEndpoint": "Select a Kubernetes service connection.",
  "loc.input.label.namespace": "Namespace",
  "loc.input.help.namespace": "Set the namespace for the kubectl command by using the â€“namespace flag. If the namespace is not provided, the commands will run in the default namespace.",
  "loc.input.label.command": "Command",
  "loc.input.help.command": "Select or specify a kubectl command to run.",
  "loc.input.label.useConfigurationFile": "Use Configuration files",
  "loc.input.help.useConfigurationFile": "Use Kubernetes configuration file with the kubectl command. Filename, directory, or URL to Kubernetes configuration files can also be provided.",
  "loc.input.label.configuration": "Configuration file",
  "loc.input.help.configuration": "Filename, directory, or URL to kubernetes configuration files that will be used with the commands.",
  "loc.input.label.arguments": "Arguments",
  "loc.input.help.arguments": "Arguments to the specified kubectl command.",
  "loc.input.label.secretType": "Type of secret",
  "loc.input.help.secretType": "Create/update a generic or docker imagepullsecret. Select dockerRegistry to create/update the imagepullsecret of the selected registry. An imagePullSecret is a way to pass a secret that contains a container registry password to the Kubelet so it can pull a private image on behalf of your Pod.",
  "loc.input.label.secretArguments": "Arguments",
  "loc.input.help.secretArguments": "Specify keys and literal values to insert in secret.For example, --from-literal=key1=value1 --from-literal=key2=\"top secret\".",
  "loc.input.label.containerRegistryType": "Container Registry type",
  "loc.input.help.containerRegistryType": "Select a Container registry type. The task can use Azure Subscription details to work with an Azure Container registry. Other standard Container registries are also supported.",
  "loc.input.label.dockerRegistryEndpoint": "Docker Registry service connection",
  "loc.input.help.dockerRegistryEndpoint": "Select a Docker registry service connection. Required for commands that need to authenticate with a registry.",
  "loc.input.label.azureSubscriptionEndpoint": "Azure subscription",
  "loc.input.help.azureSubscriptionEndpoint": "Select the Azure Resource Manager subscription, which contains Azure Container Registry. Note: To configure new service connection, select the Azure subscription from the list and click 'Authorize'. If your subscription is not listed or if you want to use an existing Service Principal, you can setup an Azure service connection using 'Add' or 'Manage' button.",
  "loc.input.label.azureContainerRegistry": "Azure Container Registry",
  "loc.input.help.azureContainerRegistry": "Select an Azure Container Registry which will be used for pulling container images and deploying applications to the Kubernetes cluster. Required for commands that need to authenticate with a registry.",
  "loc.input.label.secretName": "Secret name",
  "loc.input.help.secretName": "Name of the secret. You can use this secret name in the Kubernetes YAML configuration file.",
  "loc.input.label.forceUpdate": "Force update secret",
  "loc.input.help.forceUpdate": "Delete the secret if it exists and create a new one with updated values.",
  "loc.input.label.configMapName": "ConfigMap name",
  "loc.input.help.configMapName": "ConfigMaps allow you to decouple configuration artifacts from image content to keep containerized applications portable.",
  "loc.input.label.forceUpdateConfigMap": "Force update configmap",
  "loc.input.help.forceUpdateConfigMap": "Delete the configmap if it exists and create a new one with updated values.",
  "loc.input.label.useConfigMapFile": "Use file",
  "loc.input.help.useConfigMapFile": "Create a ConfigMap from an individual file, or from multiple files by specifying a directory.",
  "loc.input.label.configMapFile": "ConfigMap file",
  "loc.input.help.configMapFile": "Specify a file or directory that contains the configMaps",
  "loc.input.label.configMapArguments": "Arguments",
  "loc.input.help.configMapArguments": "Specify keys and literal values to insert in configMap.For example, --from-literal=key1=value1 --from-literal=key2=\"top secret\".",
  "loc.input.label.versionOrLocation": "Kubectl",
  "loc.input.help.versionOrLocation": "kubectl is a command line interface for running commands against Kubernetes clusters.",
  "loc.input.label.versionSpec": "Version spec",
  "loc.input.help.versionSpec": "Version Spec of version to get.  Examples: 1.7.0, 1.x.0, 4.x.0, 6.10.0",
  "loc.input.label.checkLatest": "Check for latest version",
  "loc.input.help.checkLatest": "Always checks online for the latest available version (stable.txt) that satisfies the version spec. This is typically false unless you have a specific scenario to always get latest. This will cause it to incur download costs when potentially not necessary, especially with the hosted build pool.",
  "loc.input.label.specifyLocation": "Path to Kubectl",
  "loc.input.help.specifyLocation": "Full path to the kubectl.exe",
  "loc.input.label.cwd": "Working directory",
  "loc.input.help.cwd": "Working directory for the Kubectl command.",
  "loc.input.label.outputFormat": "Output format",
  "loc.input.help.outputFormat": "Output format.",
  "loc.input.label.kubectlOutput": "Output variable name",
  "loc.input.help.kubectlOutput": "Name of the variable in which output of the command should be saved.",
  "loc.messages.DownloadingClient": "Downloading kubernetes client.",
  "loc.messages.CreatingSecret": "Executing create %s secret.",
  "loc.messages.CallToolRunnerExec": "Calling Toolrunner exec() method asynchronously to execute the kubectl command and store the returned promise object.",
  "loc.messages.DeleteSecret": "Executing delete %s secret",
  "loc.messages.CreatingConfigMap": "Executing create %s configmap.",
  "loc.messages.DeleteConfigMap": "Executing delete %s configmap",
  "loc.messages.ConfigMapExists": "ConfigMap %s already exists",
  "loc.messages.GetConfigMap": "Executing get %s configmap",
  "loc.messages.DockerRegistryConnectionNotSpecified": "Docker Registry service connection details not specified",
  "loc.messages.FileNotFoundException": "Can not find file at location: %s",
  "loc.messages.DownloadingKubeCtlFromUrl": "Downloading Kubectl from URL: %s",
  "loc.messages.DownloadPathForStableTxt": "Download path for stable.txt: %s",
  "loc.messages.DownloadKubeCtlFailed": "Can not download the kubectl client of version %s. Check if the version is correct https://github.com/kubernetes/kubernetes/releases",
  "loc.messages.DownloadStableVersionFailed": "Can not download kubernetes stable version file from %s. Falling back to %s",
  "loc.messages.ReturningToolRunnerExecPromise": "Called Toolrunner exec() method asynchronously. Returning the promise.",
  "loc.messages.ToolRunnerExecCallFailed": "Toolrunner exec() method returned error for the kubectl command. Error: %s.",
  "loc.messages.ToolRunnerExecCallSucceeded": "Toolrunner exec() method returned successfully for the kubectl command.",
  "loc.messages.UsingLatestStableVersion": "Invalid version 1.7 specified in Version Spec input. Using latest stable version instead. Check for correct versions https://github.com/kubernetes/kubernetes/releases",
  "loc.messages.ConfigurationFileNotFound": "No configuration file matching %s was found.",
  "loc.messages.OutputVariableDataSizeExceeded": "Output variable not set as kubectl command output exceeded the maximum supported length. Output length: %s, Maximum supported length: %s",
  "loc.messages.WritingDockerConfigToTempFile": "Writing Docker config to temp file. File path: %s, Docker config: %s"
}