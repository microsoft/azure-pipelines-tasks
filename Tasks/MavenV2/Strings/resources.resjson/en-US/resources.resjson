{
  "loc.friendlyName": "Maven",
  "loc.helpMarkDown": "[Learn more about this task](https://go.microsoft.com/fwlink/?LinkID=613723)",
  "loc.description": "Build, test, and deploy with Apache Maven",
  "loc.instanceNameFormat": "Maven $(mavenPOMFile)",
  "loc.releaseNotes": "Configuration of the SonarQube analysis was moved to the [SonarQube](https://marketplace.visualstudio.com/items?itemName=SonarSource.sonarqube) or [SonarCloud](https://marketplace.visualstudio.com/items?itemName=SonarSource.sonarcloud) extensions, in task `Prepare Analysis Configuration`",
  "loc.group.displayName.junitTestResults": "JUnit Test Results",
  "loc.group.displayName.codeCoverage": "Code Coverage",
  "loc.group.displayName.advanced": "Advanced",
  "loc.group.displayName.CodeAnalysis": "Code Analysis",
  "loc.input.label.mavenPOMFile": "Maven POM file",
  "loc.input.help.mavenPOMFile": "Relative path from the repository root to the Maven POM file.",
  "loc.input.label.goals": "Goal(s)",
  "loc.input.label.options": "Options",
  "loc.input.label.publishJUnitResults": "Publish to Azure Pipelines",
  "loc.input.help.publishJUnitResults": "Select this option to publish JUnit test results produced by the Maven build to Azure Pipelines. Each test results file matching `Test Results Files` will be published as a test run in Azure Pipelines.",
  "loc.input.label.testResultsFiles": "Test results files",
  "loc.input.help.testResultsFiles": "Specify the path and pattern of test results files to publish. Wildcards can be used ([more information](https://go.microsoft.com/fwlink/?linkid=856077)). For example, `**/TEST-*.xml` for all XML files whose name starts with `TEST-`. If no root path is specified, files are matched beneath the default working directory, the value of which is available in the variable: $(System.DefaultWorkingDirectory).  For example, a value of '**/TEST-*.xml' will actually result in matching files from '$(System.DefaultWorkingDirectory)/**/TEST-*.xml'.",
  "loc.input.label.testRunTitle": "Test run title",
  "loc.input.help.testRunTitle": "Provide a name for the test run.",
  "loc.input.label.allowBrokenSymbolicLinks": "Allow broken symbolic links",
  "loc.input.help.allowBrokenSymbolicLinks": "Set false to fail build when task finds broken symbolic link during publishing tests result",
  "loc.input.label.codeCoverageTool": "Code coverage tool",
  "loc.input.help.codeCoverageTool": "Select the code coverage tool.",
  "loc.input.label.classFilter": "Class inclusion/exclusion filters",
  "loc.input.help.classFilter": "Comma-separated list of filters to include or exclude classes from collecting code coverage. For example: +:com.*,+:org.*,-:my.app*.*.",
  "loc.input.label.classFilesDirectories": "Class files directories",
  "loc.input.help.classFilesDirectories": "This field is required for a multi-module project. Specify a comma-separated list of relative paths from the Maven POM file to directories containing class files and archive files (JAR, WAR, etc.). Code coverage is reported for class files in these directories. For example: target/classes,target/testClasses.",
  "loc.input.label.srcDirectories": "Source files directories",
  "loc.input.help.srcDirectories": "This field is required for a multi-module project. Specify a comma-separated list of relative paths from the Maven POM file to source code directories. Code coverage reports will use these to highlight source code. For example: src/java,src/Test.",
  "loc.input.label.failIfCoverageEmpty": "Fail when code coverage results are missing",
  "loc.input.help.failIfCoverageEmpty": "Fail the build if code coverage did not produce any results to publish.",
  "loc.input.label.restoreOriginalPomXml": "Restore original pom.xml after task execution",
  "loc.input.help.restoreOriginalPomXml": "Code coverage modifies pom.xml to produce results. Use this option if you need to keep original pom.xml.",
  "loc.input.label.javaHomeSelection": "Set JAVA_HOME by",
  "loc.input.help.javaHomeSelection": "Sets JAVA_HOME either by selecting a JDK version that will be discovered during builds or by manually entering a JDK path.",
  "loc.input.label.jdkVersion": "JDK version",
  "loc.input.help.jdkVersion": "Will attempt to discover the path to the selected JDK version and set JAVA_HOME accordingly.",
  "loc.input.label.jdkUserInputPath": "JDK path",
  "loc.input.help.jdkUserInputPath": "Sets JAVA_HOME to the given path.",
  "loc.input.label.jdkArchitecture": "JDK architecture",
  "loc.input.help.jdkArchitecture": "Optionally supply the architecture (x86, x64) of the JDK.",
  "loc.input.label.mavenVersionSelection": "Maven version",
  "loc.input.help.mavenVersionSelection": "Uses either the default Maven version or the version in the specified custom path.",
  "loc.input.label.mavenPath": "Maven path",
  "loc.input.help.mavenPath": "Supply the custom path to the Maven installation (e.g., /usr/share/maven).",
  "loc.input.label.mavenSetM2Home": "Set M2_HOME variable",
  "loc.input.help.mavenSetM2Home": "Sets the M2_HOME variable to a custom Maven installation path.",
  "loc.input.label.mavenOpts": "Set MAVEN_OPTS to",
  "loc.input.help.mavenOpts": "Sets the MAVEN_OPTS environment variable, which is used to send command-line arguments to start the JVM. The -Xmx flag specifies the maximum memory available to the JVM.",
  "loc.input.label.mavenFeedAuthenticate": "Authenticate built-in Maven feeds",
  "loc.input.help.mavenFeedAuthenticate": "Automatically authenticate Maven feeds from Azure Artifacts. If built-in Maven feeds are not in use, deselect this option for faster builds.",
  "loc.input.label.sqAnalysisEnabled": "Run SonarQube or SonarCloud analysis",
  "loc.input.help.sqAnalysisEnabled": "This option has changed from version 1 of the **Maven** task to use the [SonarQube](https://marketplace.visualstudio.com/items?itemName=SonarSource.sonarqube) and [SonarCloud](https://marketplace.visualstudio.com/items?itemName=SonarSource.sonarcloud) marketplace extensions.  Enable this option to run [SonarQube or SonarCloud analysis](http://redirect.sonarsource.com/doc/install-configure-scanner-tfs-ts.html) after executing goals in the **Goals** field. The **install** or **package** goal should run first. You must also add a **Prepare Analysis Configuration** task from one of the extensions to the build pipeline before this Maven task.",
  "loc.input.label.isJacocoCoverageReportXML": "Use XML Jacoco reports for SonarQube analysis",
  "loc.input.help.isJacocoCoverageReportXML": "Use XML Jacoco reports for SonarQube analysis. [More info](https://docs.sonarqube.org/latest/analysis/coverage/)",
  "loc.input.label.sqMavenPluginVersionChoice": "SonarQube scanner for Maven version",
  "loc.input.help.sqMavenPluginVersionChoice": "The SonarQube Maven plugin version to use. You can use latest version, or rely on the version in your pom.xml.",
  "loc.input.label.checkstyleAnalysisEnabled": "Run Checkstyle",
  "loc.input.help.checkstyleAnalysisEnabled": "Run the Checkstyle tool with the default Sun checks. Results are uploaded as build artifacts.",
  "loc.input.label.pmdAnalysisEnabled": "Run PMD",
  "loc.input.help.pmdAnalysisEnabled": "Use the PMD static analysis tool to look for bugs in the code. Results are uploaded as build artifacts.",
  "loc.input.label.findbugsAnalysisEnabled": "Run FindBugs",
  "loc.input.help.findbugsAnalysisEnabled": "Use the FindBugs static analysis tool to look for bugs in the code. Results are uploaded as build artifacts.",
  "loc.messages.sqCommon_CreateTaskReport_MissingField": "Failed to create TaskReport object. Missing field: %s",
  "loc.messages.sqCommon_WaitingForAnalysis": "Waiting for the SonarQube server to analyse the build.",
  "loc.messages.sqCommon_NotWaitingForAnalysis": "Build not configured to wait for the SonarQube analysis. Detailed quality gate status will not be available.",
  "loc.messages.sqCommon_QualityGateStatusUnknown": "Could not detect the quality gate status or a new status has been introduced.",
  "loc.messages.sqCommon_InvalidResponseFromServer": "Server responded with an invalid or unexpected response format.",
  "loc.messages.codeAnalysis_ToolIsEnabled": "%s analysis is enabled.",
  "loc.messages.codeAnalysis_ToolFailed": "%s analysis failed.",
  "loc.messages.sqAnalysis_IncrementalMode": "Detected a PR build - running the SonarQube analysis in incremental mode",
  "loc.messages.sqAnalysis_BuildSummaryTitle": "SonarQube Analysis Report",
  "loc.messages.sqAnalysis_TaskReportInvalid": "Invalid or missing task report. Check SonarQube finished successfully.",
  "loc.messages.sqAnalysis_BuildSummary_LinkText": "Detailed SonarQube report",
  "loc.messages.sqAnalysis_BuildSummary_CannotAuthenticate": "Cannot authenticate to the SonarQube server. Check the saved service connection details and the status of the server.",
  "loc.messages.sqAnalysis_AnalysisTimeout": "The analysis did not complete in the allotted time of %d seconds.",
  "loc.messages.sqAnalysis_IsPullRequest_SkippingBuildSummary": "Pull request build: detailed SonarQube build summary will not be available.",
  "loc.messages.sqAnalysis_IsPullRequest_SkippingBuildBreaker": "Pull request build: build will not be broken if quality gate fails.",
  "loc.messages.sqAnalysis_BuildBrokenDueToQualityGateFailure": "The SonarQube quality gate associated with this build has failed.",
  "loc.messages.sqAnalysis_QualityGatePassed": "The SonarQube quality gate associated with this build has passed (status %s)",
  "loc.messages.sqAnalysis_UnknownComparatorString": "The SonarQube build summary encountered a problem: unknown comparator '%s'",
  "loc.messages.sqAnalysis_NoUnitsFound": "The list of SonarQube measurement units could not be retrieved from the server.",
  "loc.messages.sqAnalysis_NoReportTask": "Could not find report-task.txt. Possible cause: the SonarQube analysis did not complete successfully.",
  "loc.messages.sqAnalysis_MultipleReportTasks": "Multiple report-task.txt files found. Choosing the first one. The build summary and the build breaker may not be accurate. Possible cause: multiple SonarQube analysis during the same build, which is not supported.",
  "loc.messages.codeAnalysisBuildSummaryLine_SomeViolationsSomeFiles": "%s found %d violations in %d files.",
  "loc.messages.codeAnalysisBuildSummaryLine_SomeViolationsOneFile": "%s found %d violations in 1 file.",
  "loc.messages.codeAnalysisBuildSummaryLine_OneViolationOneFile": "%s found 1 violation in 1 file.",
  "loc.messages.codeAnalysisBuildSummaryLine_NoViolations": "%s found no violations.",
  "loc.messages.codeAnalysisBuildSummaryTitle": "Code Analysis Report",
  "loc.messages.codeAnalysisArtifactSummaryTitle": "Code Analysis Results",
  "loc.messages.codeAnalysisDisabled": "Code analysis is disabled outside of the build environment. Could not find a value for: %s",
  "loc.messages.LocateJVMBasedOnVersionAndArch": "Locate JAVA_HOME for Java %s %s",
  "loc.messages.UnsupportedJdkWarning": "JDK 9 and JDK 10 are out of support. Please switch to a later version in your project and pipeline. Attempting to build with JDK 11...",
  "loc.messages.FailedToLocateSpecifiedJVM": "Failed to find the specified JDK version. Please ensure the specified JDK version is installed on the agent and the environment variable '%s' exists and is set to the location of a corresponding JDK or use the [Java Tool Installer](https://go.microsoft.com/fwlink/?linkid=875287) task to install the desired JDK.",
  "loc.messages.NoCodeCoverage": "No code coverage results were found to publish.",
  "loc.messages.EntryAlreadyExists": "The settings for the feed or repository already exists in the xml file.",
  "loc.messages.EffectivePomInvalid": "Could not parse the effective POM.",
  "loc.messages.AuthenticationNotNecessary": "No built-in Maven feeds requiring authentication were found. Disable 'Authenticate built-in Maven feeds' for faster builds.",
  "loc.messages.UsingAuthFeed": "Using built-in feed: "
}