{
  "loc.friendlyName": "Azure 容器應用程式部署",
  "loc.helpMarkDown": "[深入了解此工作](http://github.com/microsoft/azure-pipelines-tasks/blob/master/Tasks/AzureContainerAppsV0/README.md)",
  "loc.description": "建置及部署 Azure 容器應用程式的 Azure DevOps 工作。",
  "loc.instanceNameFormat": "Azure 容器應用程式部署",
  "loc.releaseNotes": "已發行用於建置及部署 Azure 容器應用程式的新 AzureContainerApps 工作。",
  "loc.input.label.cwd": "工作目錄",
  "loc.input.help.cwd": "指令碼執行所在的現行工作目錄。Empty 是存放庫 (組建) 或成品 (發行) 的根目錄，即 $(System.DefaultWorkingDirectory)",
  "loc.input.label.appSourcePath": "應用程式來源路徑",
  "loc.input.help.appSourcePath": "要建立之來源應用程式程式碼執行器上的絕對路徑。若未提供，必須提供 'imageToDeploy' 引數，以確保容器應用程式具有要參考的映像。",
  "loc.input.label.connectedServiceNameARM": "Azure Resource Manager 連線",
  "loc.input.help.connectedServiceNameARM": "為部署選取 Azure Resource Manager 服務連線",
  "loc.input.label.acrName": "Azure Container Registry 名稱",
  "loc.input.help.acrName": "要推送可執行之應用程式映像的目標 Azure Container Registry 名稱。",
  "loc.input.label.acrUsername": "Azure Container Registry 使用者名稱",
  "loc.input.help.acrUsername": "用來向提供的 Azure Container Registry 驗證推送要求的使用者名稱。若未提供，將會透過 'az acr login' 產生存取權杖，並提供給 'docker login' 以驗證要求。",
  "loc.input.label.acrPassword": "Azure Container Registry 密碼",
  "loc.input.help.acrPassword": "用來向提供的 Azure Container Registry 驗證推送要求的密碼。若未提供，將會透過 'az acr login' 產生存取權杖，並提供給 'docker login' 以驗證要求。",
  "loc.input.label.dockerfilePath": "Dockerfile 路徑",
  "loc.input.help.dockerfilePath": "所提供應用程式來源中 Dockerfile 的相對路徑，應該用於建置映像，然後推送至 ACR 並部署到容器應用程式。若未提供，此工作將檢查提供的應用程式來源根目錄是否有名為 'Dockerfile' 的檔案，並使用該檔案來建置映像。否則，將使用 Oryx++ Builder 來建立映像。",
  "loc.input.label.imageToBuild": "要建置的 Docker 映像",
  "loc.input.help.imageToBuild": "The custom name of the image that is to be built, pushed to ACR and deployed to the Container App by this task. Note: this image name should include the ACR server; e.g., <acr-name>.azurecr.io/<repo>:<tag>. If this argument is not provided, a default image name will be constructed in the form of `<acr-name>.azurecr.io/ado-task/container-app:<build-id>.<build-number>`.",
  "loc.input.label.imageToDeploy": "要部署的 Docker 映像",
  "loc.input.help.imageToDeploy": "映像的自訂名稱已推送至 ACR，且將由此工作部署到容器應用程式。注意: 映像名稱應包含 ACR 伺服器; 例如 <acr-name>.azurecr.io/<repo>:<tag>。如果未提供此引數，則會使用為 'imageToBuild' 引數提供 (或決定) 的值。",
  "loc.input.label.containerAppName": "Azure 容器應用程式名稱",
  "loc.input.help.containerAppName": "The name of the Azure Container App that will be created or updated. If not provided, this value will be in the form of `ado-task-app-<build-id>-<build-number>`.",
  "loc.input.label.resourceGroup": "Azure 資源群組名稱",
  "loc.input.help.resourceGroup": "The existing resource group that the Azure Container App will be created in. If not provided, this value will be `<container-app-name>-rg` and its existence will first be checked before attempting to create it.",
  "loc.input.label.containerAppEnvironment": "Azure 容器應用程式環境",
  "loc.input.help.containerAppEnvironment": "The name of the Azure Container App environment to use with the application. If not provided, an existing environment in the resource group of the Container App will be used, otherwise, an environment will be created in the form of `<container-app-name>-env`.",
  "loc.input.label.runtimeStack": "應用程式執行階段堆疊",
  "loc.input.help.runtimeStack": "The platform version stack that the application runs in when deployed to the Azure Container App. This should be provided in the form of `<platform>:<version>`. If not provided, this value is determined by Oryx based on the contents of the provided application. Please view the following document for more information on the supported runtime stacks for Oryx: https://github.com/microsoft/Oryx/blob/main/doc/supportedRuntimeVersions.md",
  "loc.input.label.targetPort": "應用程式目標連接埠",
  "loc.input.help.targetPort": "The designated port for the application to run on. If no value is provided and the builder is used to build the runnable application image, the target port will be set to 80 for Python applications and 8080 for all other platform applications. If no value is provided when creating a Container App, the target port will default to 80. Note: when using this task to update a Container App, the target port may be updated if not provided based on changes to the ingress property.",
  "loc.input.label.location": "容器應用程式的位置",
  "loc.input.help.location": "容器應用程式 (及其他已建立資源) 的目標部署位置。",
  "loc.input.label.environmentVariables": "環境變數",
  "loc.input.help.environmentVariables": "容器的環境變數清單。以 'key=value' 為格式的空格分隔值。用以清除現有值的空字串。以 'secretref:' 作為參考秘密的前置值。",
  "loc.input.label.ingress": "Ingress setting",
  "loc.input.help.ingress": "Possible options: external, internal, disabled. If set to `external` (default value if not provided when creating a Container App), the Container App will be visible from the internet or a VNET, depending on the app environment endpoint configured. If set to `internal`, the Container App will be visible from within the app environment only. If set to `disabled`, ingress will be disabled for this Container App and will not have an HTTP or TCP endpoint.",
  "loc.input.label.yamlConfigPath": "YAML configuration file path",
  "loc.input.help.yamlConfigPath": "Full path (on the executing Azure Pipelines agent) to the YAML file detailing the configuration of the Container App.",
  "loc.input.label.disableTelemetry": "停用遙測",
  "loc.input.help.disableTelemetry": "如果設定為 'true'，此 Azure DevOps 工作將不會收集任何遙測。如果設定為 'false'，或未提供此引數，則會將有關容器應用程式組建的遙測傳送給 Microsoft，並部署此 Azure DevOps 工作的目標案例。",
  "loc.messages.AcrAccessTokenAuthFailed": "無法使用存取權杖對 ACR 執行個體 '%s.azurecr.io' 進行驗證。",
  "loc.messages.AcrAccessTokenLoginMessage": "使用透過 Azure CLI 產生的存取權杖登入 Azure Container Registry。",
  "loc.messages.AcrUsernamePasswordAuthFailed": "無法使用使用者名稱/密碼對 ACR 執行個體 '%s.azurecr.io' 進行驗證。",
  "loc.messages.AcrUsernamePasswordLoginMessage": "使用提供的 acrUsername 和 acrPassword 引數登入 Azure Container Registry。",
  "loc.messages.AzureCliDynamicInstallFailed": "Unable to set the Azure CLI to dynamically install missing extensions.",
  "loc.messages.BashCommandFailed": "Unable to run provided bash command '%s'.",
  "loc.messages.CheckForAppSourceDockerfileMessage": "未提供 dockerfilePath 引數; 正在檢查應用程式來源路徑 '%s' 根目錄的 'Dockerfile'，從中建立映像。",
  "loc.messages.ContainerAppEnvironmentUsedMessage": "部署容器應用程式時，使用提供的 containerAppEnvironment 值提供 '%s'。",
  "loc.messages.CreateContainerAppEnvironmentFailed": "Unable to create Container App Environment.",
  "loc.messages.CreateContainerAppFailed": "Unable to create Azure Container App via 'az containerapp create' command.",
  "loc.messages.CreateContainerAppFromYamlFailed": "Unable to create Azure Container App from YAML configuration file via 'az containerapp create' command.",
  "loc.messages.CreateImageWithBuilderFailed": "無法使用 Oryx++ Builder 建立可執行的應用程式映像。",
  "loc.messages.CreateImageWithBuilderMessage": "未提供或找不到應用程式來源的 Dockerfile; 嘗試使用 Oryx++ Builder 建立可執行的應用程式映像。",
  "loc.messages.CreateImageWithDockerfileFailed": "無法使用提供的或探索到的 Dockerfile 建立可執行的應用程式映像。",
  "loc.messages.CreateImageWithDockerfileMessage": "已提供或找到應用程式來源的 Dockerfile; 嘗試從 Dockerfile '%s' 建置映像。",
  "loc.messages.CreateResourceGroupFailed": "Unable to create resource group '%s'.",
  "loc.messages.DefaultContainerAppNameMessage": "未提供 containerAppName 引數; 設定容器應用程式的名稱，以建立/更新至 '%s'。",
  "loc.messages.DefaultContainerAppEnvironmentMessage": "No containerAppEnvironment argument was provided; setting the Container App to create/update to '%s'.",
  "loc.messages.DefaultImageToBuildMessage": "未提供 imageToBuild 引數; 設定要建置成 '%s' 的映像。",
  "loc.messages.DefaultImageToDeployMessage": "未提供 imageToDeploy 引數; 設定映像以部署到' %s'。",
  "loc.messages.DefaultIngressMessage": "No ingress argument was provided, setting the ingress value to '%s'.",
  "loc.messages.DefaultResourceGroupMessage": "未提供 resourceGroup 引數; 將部署的資源群組設定為'%s'。",
  "loc.messages.DefaultRuntimeStackMessage": "未提供 RuntimeStack 引數; 使用針對應用程式 '%s' 找到的執行階段堆疊。",
  "loc.messages.DefaultTargetPortMessage": "未提供 targetPort 引數; 使用應用程式的目標連接埠 '%s'。",
  "loc.messages.DetermineRuntimeStackFailed": "Unable to determine runtime stack from application source '%s'.",
  "loc.messages.DisableContainerAppIngressFailed": "Unable to disable ingress for the Container App.",
  "loc.messages.DisabledIngressMessage": "Ingress will be disabled for the Container App.",
  "loc.messages.EnableContainerAppIngressFailed": "Unable to enable ingress for the Container App.",
  "loc.messages.ErrorCodeFormat": "錯誤碼: [%s]",
  "loc.messages.ErrorMessageFormat": "錯誤: %s",
  "loc.messages.ExistingContainerAppEnvironmentMessage": "Discovered existing Container App Environment, '%s', to use with the Container App.",
  "loc.messages.FoundAppSourceDockerfileMessage": "在提供的應用程式來源中找到現有的 Dockerfile，位於路徑 '%s'; 將會從這個 Dockerfile 建立映像。",
  "loc.messages.MissingAcrNameMessage": "如果提供 appSourcePath 引數，也必須提供 acrName 引數。",
  "loc.messages.MissingRequiredArgumentMessage": "One of the following arguments must be provided: appSourcePath, imageToDeploy, yamlConfigPath",
  "loc.messages.PackCliInstallFailed": "無法安裝套件 CLI。",
  "loc.messages.PushImageToAcrFailed": "無法將映像 '%s' 推送至 ACR。",
  "loc.messages.SetDefaultBuilderFailed": "無法將 Oryx++ Builder 設定為預設建立器。",
  "loc.messages.UpdateContainerAppFailed": "Unable to update Azure Container App via 'az containerapp update' command.",
  "loc.messages.UpdateContainerAppFromYamlFailed": "Unable to update Azure Container App from YAML configuration file via 'az containerapp update' command.",
  "loc.messages.UpdateContainerAppRegistryDetailsFailed": "Unable to update Azure Container App ACR details via 'az containerapp registry set' command."
}