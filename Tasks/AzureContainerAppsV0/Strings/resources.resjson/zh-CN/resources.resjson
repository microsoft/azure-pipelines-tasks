{
  "loc.friendlyName": "Azure 容器应用部署",
  "loc.helpMarkDown": "[了解有关此任务的详细信息](http://github.com/microsoft/azure-pipelines-tasks/blob/master/Tasks/AzureContainerAppsV0/README.md)",
  "loc.description": "用于生成和部署 Azure 容器应用的 Azure DevOps 任务。",
  "loc.instanceNameFormat": "Azure 容器应用部署",
  "loc.releaseNotes": "发布了用于生成和部署 Azure 容器应用的新 AzureContainerApps 任务。",
  "loc.input.label.cwd": "工作目录",
  "loc.input.help.cwd": "脚本运行于的当前工作目录。存储库(内部版本)或项目(发行版本)的根路径  $(System.DefaultWorkingDirectory) 为空",
  "loc.input.label.appSourcePath": "应用程序源路径",
  "loc.input.help.appSourcePath": "要生成的源应用程序代码的运行程序上的绝对路径。如果未提供，则必须提供“imageToDeploy”参数，以确保容器应用具有要引用的映像。",
  "loc.input.label.connectedServiceNameARM": "Azure 资源管理器连接",
  "loc.input.help.connectedServiceNameARM": "为部署选择 Azure 资源管理器服务连接",
  "loc.input.label.acrName": "Azure 容器注册表名称",
  "loc.input.help.acrName": "可运行应用程序映像将推送到的 Azure 容器注册表的名称。",
  "loc.input.label.acrUsername": "Azure 容器注册表用户名",
  "loc.input.help.acrUsername": "用于对所提供的 Azure 容器注册表的推送请求进行身份验证的用户名。如果未提供，将通过 “az acr login” 生成访问令牌，并将其提供给 “docker login” 以对请求进行身份验证。",
  "loc.input.label.acrPassword": "Azure 容器注册表密码",
  "loc.input.help.acrPassword": "用于对所提供的 Azure 容器注册表的推送请求进行身份验证的密码。如果未提供，将通过 “az acr login” 生成访问令牌，并将其提供给 “docker login” 以对请求进行身份验证。",
  "loc.input.label.dockerfilePath": "Dockerfile 路径",
  "loc.input.help.dockerfilePath": "所提供的应用程序源中 Dockerfile 的相对路径，该路径应用于生成映像，然后将其推送到 ACR 并部署到容器应用。如果未提供，此任务将检查所提供的应用程序源的根目录中是否存在名为“Dockerfile”的文件，并使用该文件生成映像。否则，Oryx++ Builder 将用于创建映像。",
  "loc.input.label.imageToBuild": "要生成的 Docker 映像",
  "loc.input.help.imageToBuild": "The custom name of the image that is to be built, pushed to ACR and deployed to the Container App by this task. Note: this image name should include the ACR server; e.g., <acr-name>.azurecr.io/<repo>:<tag>. If this argument is not provided, a default image name will be constructed in the form of `<acr-name>.azurecr.io/ado-task/container-app:<build-id>.<build-number>`.",
  "loc.input.label.imageToDeploy": "要部署的 Docker 映像",
  "loc.input.help.imageToDeploy": "映像的自定义名称，该映像已推送到 ACR，并将通过此任务部署到容器应用。注意: 映像名称应包括 ACR 服务器; 例如，<acr-name>.azurecr.io/<repo>:<tag>。如果未提供此参数，则将使用为“imageToBuild”参数提供的(或确定的)值。",
  "loc.input.label.containerAppName": "Azure 容器应用名称",
  "loc.input.help.containerAppName": "The name of the Azure Container App that will be created or updated. If not provided, this value will be in the form of `ado-task-app-<build-id>-<build-number>`.",
  "loc.input.label.resourceGroup": "Azure 资源组名称",
  "loc.input.help.resourceGroup": "The existing resource group that the Azure Container App will be created in. If not provided, this value will be `<container-app-name>-rg` and its existence will first be checked before attempting to create it.",
  "loc.input.label.containerAppEnvironment": "Azure 容器应用环境",
  "loc.input.help.containerAppEnvironment": "The name of the Azure Container App environment to use with the application. If not provided, an existing environment in the resource group of the Container App will be used, otherwise, an environment will be created in the form of `<container-app-name>-env`.",
  "loc.input.label.runtimeStack": "应用程序运行时堆栈",
  "loc.input.help.runtimeStack": "The platform version stack that the application runs in when deployed to the Azure Container App. This should be provided in the form of `<platform>:<version>`. If not provided, this value is determined by Oryx based on the contents of the provided application. Please view the following document for more information on the supported runtime stacks for Oryx: https://github.com/microsoft/Oryx/blob/main/doc/supportedRuntimeVersions.md",
  "loc.input.label.targetPort": "应用程序目标端口",
  "loc.input.help.targetPort": "The designated port for the application to run on. If no value is provided and the builder is used to build the runnable application image, the target port will be set to 80 for Python applications and 8080 for all other platform applications. If no value is provided when creating a Container App, the target port will default to 80. Note: when using this task to update a Container App, the target port may be updated if not provided based on changes to the ingress property.",
  "loc.input.label.location": "容器应用的位置",
  "loc.input.help.location": "容器应用(和其他已创建的资源)将部署到的位置。",
  "loc.input.label.environmentVariables": "环境变量",
  "loc.input.help.environmentVariables": "容器的环境变量列表。以 \"key=value\" 格式分隔的值。用于清除现有值的空字符串。前缀值为“secretref:”，用于引用机密。",
  "loc.input.label.ingress": "Ingress setting",
  "loc.input.help.ingress": "Possible options: external, internal, disabled. If set to `external` (default value if not provided when creating a Container App), the Container App will be visible from the internet or a VNET, depending on the app environment endpoint configured. If set to `internal`, the Container App will be visible from within the app environment only. If set to `disabled`, ingress will be disabled for this Container App and will not have an HTTP or TCP endpoint.",
  "loc.input.label.yamlConfigPath": "YAML configuration file path",
  "loc.input.help.yamlConfigPath": "Full path (on the executing Azure Pipelines agent) to the YAML file detailing the configuration of the Container App.",
  "loc.input.label.disableTelemetry": "禁用遥测",
  "loc.input.help.disableTelemetry": "如果设置为“true”，则此 Azure DevOps 任务不会收集遥测数据。如果设置为“false”，或者未提供此参数，则会向 Microsoft 发送有关此 Azure DevOps 任务所针对的容器应用生成和部署方案的遥测数据。",
  "loc.messages.AcrAccessTokenAuthFailed": "无法使用访问令牌对 ACR 实例“%s.azurecr.io”进行身份验证。",
  "loc.messages.AcrAccessTokenLoginMessage": "使用要通过 Azure CLI 生成的访问令牌登录到 Azure 容器注册表。",
  "loc.messages.AcrUsernamePasswordAuthFailed": "无法通过用户名/密码对 ACR 实例“%s.azurecr.io”进行身份验证。",
  "loc.messages.AcrUsernamePasswordLoginMessage": "使用提供的 acrUsername 和 acrPassword 参数登录到 Azure 容器注册表。",
  "loc.messages.AzureCliDynamicInstallFailed": "Unable to set the Azure CLI to dynamically install missing extensions.",
  "loc.messages.BashCommandFailed": "Unable to run provided bash command '%s'.",
  "loc.messages.CheckForAppSourceDockerfileMessage": "未提供 dockerfilePath 参数; 正在检查应用源路径“%s”的根目录中的“Dockerfile”以从中生成映像。",
  "loc.messages.ContainerAppEnvironmentUsedMessage": "部署容器应用时，使用提供的 containerAppEnvironment 值提供的“%s”。",
  "loc.messages.CreateContainerAppEnvironmentFailed": "Unable to create Container App Environment.",
  "loc.messages.CreateContainerAppFailed": "Unable to create Azure Container App via 'az containerapp create' command.",
  "loc.messages.CreateContainerAppFromYamlFailed": "Unable to create Azure Container App from YAML configuration file via 'az containerapp create' command.",
  "loc.messages.CreateImageWithBuilderFailed": "无法使用 Oryx++ Builder 创建可运行的应用程序映像。",
  "loc.messages.CreateImageWithBuilderMessage": "未为应用程序源提供或找到 Dockerfile；正在尝试使用 Oryx++ 生成器创建可运行的应用程序映像。",
  "loc.messages.CreateImageWithDockerfileFailed": "无法使用提供的或发现的 Dockerfile 创建可运行的应用程序映像。",
  "loc.messages.CreateImageWithDockerfileMessage": "已为应用程序源提供或找到 Dockerfile; 正在尝试从 Dockerfile“%s”生成映像。",
  "loc.messages.CreateResourceGroupFailed": "Unable to create resource group '%s'.",
  "loc.messages.DefaultContainerAppNameMessage": "未提供 containerAppName 参数; 正在设置要创建/更新到“%s”的容器应用的名称。",
  "loc.messages.DefaultContainerAppEnvironmentMessage": "No containerAppEnvironment argument was provided; setting the Container App to create/update to '%s'.",
  "loc.messages.DefaultImageToBuildMessage": "未提供 imageToBuild 参数; 正在将要生成的映像设置为“%s”。",
  "loc.messages.DefaultImageToDeployMessage": "未提供 imageToDeploy 参数; 正在将映像设置为部署到“%s”。",
  "loc.messages.DefaultIngressMessage": "No ingress argument was provided, setting the ingress value to '%s'.",
  "loc.messages.DefaultResourceGroupMessage": "未提供 resourceGroup 参数；正在将部署的资源组设置为“%s”。",
  "loc.messages.DefaultRuntimeStackMessage": "未提供 runtimeStack 参数；正在使用为应用“%s”找到的运行时堆栈。",
  "loc.messages.DefaultTargetPortMessage": "未提供 targetPort 参数; 使用应用程序的目标端口“%s”。",
  "loc.messages.DetermineRuntimeStackFailed": "Unable to determine runtime stack from application source '%s'.",
  "loc.messages.DisableContainerAppIngressFailed": "Unable to disable ingress for the Container App.",
  "loc.messages.DisabledIngressMessage": "Ingress will be disabled for the Container App.",
  "loc.messages.EnableContainerAppIngressFailed": "Unable to enable ingress for the Container App.",
  "loc.messages.ErrorCodeFormat": "错误代码: [%s]",
  "loc.messages.ErrorMessageFormat": "错误: %s",
  "loc.messages.ExistingContainerAppEnvironmentMessage": "Discovered existing Container App Environment, '%s', to use with the Container App.",
  "loc.messages.FoundAppSourceDockerfileMessage": "在路径“%s”提供的应用程序源中找到现有的 Dockerfile; 映像将从此 Dockerfile 生成。",
  "loc.messages.MissingAcrNameMessage": "如果提供了 appSourcePath 参数，则还必须提供 acrName 参数。",
  "loc.messages.MissingRequiredArgumentMessage": "One of the following arguments must be provided: appSourcePath, imageToDeploy, yamlConfigPath",
  "loc.messages.PackCliInstallFailed": "无法安装包 CLI。",
  "loc.messages.PushImageToAcrFailed": "无法将映像“%s”推送到 ACR。",
  "loc.messages.SetDefaultBuilderFailed": "无法将 Oryx++ Builder 设置为默认生成器。",
  "loc.messages.UpdateContainerAppFailed": "Unable to update Azure Container App via 'az containerapp update' command.",
  "loc.messages.UpdateContainerAppFromYamlFailed": "Unable to update Azure Container App from YAML configuration file via 'az containerapp update' command.",
  "loc.messages.UpdateContainerAppRegistryDetailsFailed": "Unable to update Azure Container App ACR details via 'az containerapp registry set' command."
}