{
  "loc.friendlyName": "发布代码覆盖率结果",
  "loc.helpMarkDown": "[详细了解此任务](https://go.microsoft.com/fwlink/?LinkID=626485)",
  "loc.description": "发布生成的 Cobertura 或 JaCoCo 代码覆盖率结果",
  "loc.instanceNameFormat": "发布 $(summaryFileLocation) 的代码覆盖率",
  "loc.input.label.codeCoverageTool": "代码覆盖率工具",
  "loc.input.help.codeCoverageTool": "用于生成代码覆盖率结果的工具。",
  "loc.input.label.summaryFileLocation": "摘要文件",
  "loc.input.help.summaryFileLocation": "摘要文件的路径，该文件包含代码覆盖率统计信息，如行、方法和类覆盖率。其值可能包含 minimatch 模式。例如: `$(System.DefaultWorkingDirectory)/MyApp/**/site/cobertura/coverage.xml`",
  "loc.input.label.pathToSources": "源文件的路径",
  "loc.input.help.pathToSources": "当覆盖率 XML 报表不包含源文件的绝对路径时，需要源文件的路径。例如，JaCoCo 报表不使用绝对路径，当发布 Java 应用的 JaCoCo 覆盖率时，模式将与 `$(System.DefaultWorkingDirectory)/MyApp/src/main/java/` 类似。<br />如果在 Docker 容器中运行测试，则也需要此输入。此输入应指向主机上源文件的绝对路径。例如 `$(System.DefaultWorkingDirectory)/MyApp/`",
  "loc.input.label.reportDirectory": "报表目录",
  "loc.input.help.reportDirectory": "代码覆盖率 HTML 报表目录的路径。已发布报表目录，稍后可作为生成的项目查看。其值可能包含 minimatch 模式。例如: `$(System.DefaultWorkingDirectory)/MyApp/**/site/cobertura`",
  "loc.input.label.additionalCodeCoverageFiles": "其他文件",
  "loc.input.help.additionalCodeCoverageFiles": "文件路径模式指定将其他任何代码覆盖率文件发布为生成的项目。其值可能包含 minimatch 模式。例如: $(System.DefaultWorkingDirectory)/**/*.exec`",
  "loc.input.label.failIfCoverageEmpty": "缺失代码覆盖率结果时失败",
  "loc.input.help.failIfCoverageEmpty": "如果代码覆盖率未产生任何可发布的结果，任务将失败。",
  "loc.messages.FoundNMatchesForPattern": "找到 %s 个结果匹配模式: %s",
  "loc.messages.MultipleSummaryFilesFound": "找到多个文件或目录匹配项。将使用首次匹配: %s",
  "loc.messages.NoCodeCoverage": "未找到可发布的代码覆盖率结果。",
  "loc.messages.InstallDotNetCoreForHtmlReport": "请安装 dotnet core 以允许自动生成 HTML 报表。",
  "loc.messages.FailedToGenerateHtmlReport": "未能生成 HTML 报表。错误: %s",
  "loc.messages.IgnoringReportDirectory": "忽略包含 HTML 内容的覆盖率报表目录，因为我们是自动生成 HTML 内容",
  "loc.messages.UpgradeAgentMessage": "请升级代理版本。https://github.com/Microsoft/vsts-agent/releases",
  "loc.messages.GeneratedHtmlReport": "生成的代码覆盖率 HTML 报表: %s"
}