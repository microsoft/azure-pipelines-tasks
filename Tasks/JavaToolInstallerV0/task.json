{
    "id": "C0E0B74F-0931-47C7-AC27-7C5A19456A36",
    "name": "JavaToolInstaller",
    "friendlyName": "Java tool installer",
    "description": "Acquire a specific version of Java from a user-supplied Azure blob or the tool cache and sets JAVA_HOME",
    "helpUrl": "https://docs.microsoft.com/azure/devops/pipelines/tasks/tool/java-tool-installer",
    "helpMarkDown": "[Learn more about this task](https://go.microsoft.com/fwlink/?linkid=875287) or [see the Java documentation](https://docs.oracle.com/java/)",
    "category": "Tool",
    "runsOn": [
        "Agent",
        "DeploymentGroup"
    ],
    "author": "Microsoft Corporation",
    "version": {
        "Major": 0,
        "Minor": 217,
        "Patch": 1
    },
    "satisfies": [
        "Java",
        "JDK"
    ],
    "demands": [],
    "groups": [
        {
            "name": "JavaInAzureGroup",
            "displayName": "Download Java from an Azure blob",
            "isExpanded": true
        }
    ],
    "minimumAgentVersion": "2.182.1",
    "instanceNameFormat": "Use Java $(versionSpec)",
    "inputs": [
        {
            "name": "versionSpec",
            "type": "string",
            "label": "JDK version",
            "defaultValue": "8",
            "required": true,
            "helpMarkDown": "A number that specifies the JDK version to make available on the path. Use a whole number version, such as 10"
        },
        {
            "name": "jdkArchitectureOption",
            "type": "pickList",
            "label": "JDK architecture",
            "options": {
                "x64": "X64",
                "x86": "X86"
            },
            "required": true,
            "helpMarkDown": "The architecture (x86, x64) of the JDK."
        },
        {
            "name": "jdkSourceOption",
            "type": "pickList",
            "label": "JDK source",
            "required": true,
            "options": {
                "AzureStorage": "Azure Storage",
                "LocalDirectory": "Local Directory",
                "PreInstalled": "Pre-installed"
            },
            "helpMarkDown": "Source for the compressed JDK."
        },
        {
            "name": "jdkFile",
            "type": "filePath",
            "label": "JDK file",
            "required": true,
            "visibleRule": "jdkSourceOption == LocalDirectory",
            "helpMarkDown": "Path to where the compressed JDK is located. The path could be in your source repository or a local path on the agent."
        },
        {
            "name": "azureResourceManagerEndpoint",
            "type": "connectedService:AzureRM",
            "label": "Azure subscription",
            "required": true,
            "visibleRule": "jdkSourceOption == AzureStorage",
            "helpMarkDown": "Choose the Azure Resource Manager subscription for the JDK."
        },
        {
            "name": "azureStorageAccountName",
            "type": "pickList",
            "label": "Storage account name",
            "required": true,
            "properties": {
                "EditableOptions": "True"
            },
            "visibleRule": "jdkSourceOption == AzureStorage",
            "helpMarkDown": "Azure Classic and Resource Manager storage accounts are listed. Select the storage account name in which the JDK is located."
        },
        {
            "name": "azureContainerName",
            "type": "pickList",
            "label": "Container name",
            "properties": {
                "EditableOptions": "True"
            },
            "required": true,
            "visibleRule": "jdkSourceOption == AzureStorage",
            "helpMarkDown": "Name of the container in the storage account in which the JDK is located."
        },
        {
            "name": "azureCommonVirtualFile",
            "type": "string",
            "label": "Common virtual path",
            "required": true,
            "visibleRule": "jdkSourceOption == AzureStorage",
            "helpMarkDown": "Path to the JDK inside the Azure storage container."
        },
        {
            "name": "jdkDestinationDirectory",
            "type": "filePath",
            "label": "Destination directory",
            "defaultValue": "",
            "required": true,
            "visibleRule": "jdkSourceOption != PreInstalled",
            "helpMarkDown": "On Linux and Windows, this is used as the destination directory for JDK installation. On macOS, this directory is used as a temporary folder for extracting of .dmg's since macOS doesn't support installing of JDK to specific directory."
        },
        {
            "name": "cleanDestinationDirectory",
            "type": "boolean",
            "label": "Clean destination directory",
            "required": true,
            "defaultValue": "true",
            "visibleRule": "jdkSourceOption != PreInstalled",
            "helpMarkDown": "Select this option to clean the destination directory before JDK is extracted into it."
        },
        {
            "name": "createExtractDirectory",
            "type": "boolean",
            "label": "Create directory for extracting",
            "required": false,
            "defaultValue": true,
            "visibleRule": "jdkSourceOption != PreInstalled",
            "helpMarkDown": "By default, task is creating a directory similar to this JAVA_HOME_8_X64_OpenJDK_zip for extracting JDK. This option allows to disable creation of this folder, in this case, JDK will be located in the root of jdkDestinationDirectory"
        }
    ],
    "dataSourceBindings": [
        {
            "endpointId": "$(azureResourceManagerEndpoint)",
            "target": "azureStorageAccountName",
            "dataSourceName": "AzureStorageAccountRMandClassic"
        },
        {
            "target": "azureContainerName",
            "endpointId": "$(azureResourceManagerEndpoint)",
            "dataSourceName": "AzureStorageContainer",
            "resultTemplate": "{ \"Value\" : \"{{ Name }}\", \"DisplayValue\" : \"{{ Name }}\" }",
            "parameters": {
                "storageAccount": "$(azureStorageAccountName)"
            }
        }
    ],
    "execution": {
        "Node10": {
            "target": "javatoolinstaller.js",
            "argumentFormat": ""
        },
        "Node16": {
            "target": "javatoolinstaller.js",
            "argumentFormat": ""
        }
    },
    "restrictions": {
        "commands": {
            "mode": "restricted"
        },
        "settableVariables": {
            "allowed": [
                "PATH",
                "JAVA_HOME*"
            ]
        }
    },
    "messages": {
        "DownloadFromAzureBlobStorage": "Downloading artifacts from Azure blob storage, Container Name: %s",
        "SuccessFullyFetchedItemList": "Successfully fetched list of items",
        "StorageAccountDoesNotExist": "Failed to get azure storage account with name %s.",
        "UnzipExtractFile": "Extracting file: %s",
        "SevenZipExtractFile": "Extracting file: %s",
        "TarExtractFile": "Extracting file: %s",
        "ExtractFileFailedMsg": "Extraction failed for file: %s \ncode: %d \nstdout: %s \nstderr: %s \nerror: %s;",
        "ExtractNonExistFile": "Extraction failed for file: %s because it does not exist.",
        "ExtractDirFailed": "Extraction failed for file: %s because it is a directory.",
        "CreateTempDir": "Creating temp folder: %s to decompress: %s",
        "TempDir": "tempFolder = %s",
        "DecompressedTempTar": "Decompressed temporary tar from: %s to: %s",
        "RemoveTempDir": "Removing temp folder: %s",
        "ExtractFailedCannotCreate": "Extraction failed for file: %s because temporary location could not be created: %s",
        "CleanDestDir": "Cleaning destination folder before extraction: %s",
        "CreateDestDir": "Creating destination folder: %s",
        "RetrievingJdkFromAzure": "Retrieving the JDK from Azure blob storage.",
        "RetrievingJdkFromLocalPath": "Retrieving the JDK from local path.",
        "SucceedMsg": "Successfully extracted all files.",
        "SetJavaHome": "JAVA_HOME is being set to: %s",
        "SetExtendedJavaHome": "%s is being set to: %s",
        "UnsupportedFileExtension": "Specified JDK source file does not have a supported file extension.",
        "CouldNotFetchAccessTokenforAzureStatusCode": "Could not fetch access token for Azure. Status code: %s, status message: %s",
        "CouldNotFetchAccessTokenforMSIDueToMSINotConfiguredProperlyStatusCode": "Could not fetch access token for Managed Service Principal. Please configure Managed Service Identity (MSI) for virtual machine 'https://aka.ms/azure-msi-docs'. Status code: %s, status message: %s",
        "CouldNotFetchAccessTokenforMSIStatusCode": "Could not fetch access token for Managed Service Principal. Status code: %s, status message: %s",
        "ExpiredServicePrincipal": "Could not fetch access token for Azure. Verify if the Service Principal used is valid and not expired.",
        "CorrelationIdForARM": "Correlation ID from ARM api call response : %s",
        "JavaNotPreinstalled": "Java %s is not preinstalled on this agent",
        "UsePreinstalledJava": "Use preinstalled JDK from %s",
        "WrongArchiveStructure": "JDK file is not valid. Verify if JDK file contains only one root folder with 'bin' inside.",
        "WrongArchiveFile": "Archive file is wrong. There is not any folder which contains JDK",
        "ShareAccessError": "Network shared resource not available: (%s)",
        "UnsupportedDMGStructure": "JDK file is not supported. Verify if JDK file contains exactly one folder inside.",
        "NoPKGFile": "Could not find PKG file.",
        "SeveralPKGFiles": "Found more than one PKG files.",
        "InstallJDK": "Installing JDK.",
        "AttachDiskImage": "Attaching a disk image.",
        "DetachDiskImage": "Detaching a disk image.",
        "PkgPathDoesNotExist": "Package path does not exist.",
        "PreInstalledJavaUpgraded": "Preinstalled JDK updated.",
        "JavaSuccessfullyInstalled": "Java has been successfully installed",
        "ArchiveWasExtractedEarlier": "Archive with JDK was extracted earlier - skipping extracting",
        "ExtractingArchiveToPath": "Extracting archive to: %s",
        "ErrorCleaningFolder": "Folder cleaning error: %s"
    }
}