{
  "loc.friendlyName": ".NET Core",
  "loc.helpMarkDown": "[详细了解此任务](https://go.microsoft.com/fwlink/?linkid=832194)或[参阅 .NET Core 文档](https://docs.microsoft.com/dotnet/core/)",
  "loc.description": "生成、测试、打包或发布 dotnet 应用程序，或运行自定义 dotnet 命令",
  "loc.instanceNameFormat": "dotnet $(command)",
  "loc.group.displayName.restoreAuth": "源和身份验证",
  "loc.group.displayName.restoreAdvanced": "高级",
  "loc.group.displayName.pushAuth": "目标源和身份验证",
  "loc.group.displayName.pushAdvanced": "高级",
  "loc.group.displayName.packOptions": "打包选项",
  "loc.group.displayName.packAdvanced": "高级",
  "loc.group.displayName.generalAdvanced": "高级",
  "loc.input.label.command": "命令",
  "loc.input.help.command": "要运行的 dotnet 命令。选择“自定义”以添加参数或使用此处未列出的命令。",
  "loc.input.label.publishWebProjects": "发布 Web 项目",
  "loc.input.help.publishWebProjects": "如果为 true，任务将尝试查找存储库中的 Web 项目，并对其运行发布命令。可通过目录中的 web.config 文件或 wwwroot 文件夹来识别 Web 项目。",
  "loc.input.label.projects": "项目路径",
  "loc.input.help.projects": "要使用的 csproj 文件的路径。可使用通配符(例如，对所有子文件夹中的所有 .csproj 文件使用 **/*.csproj)。**此字段遵循 glob 模式，且无论工作目录如何，都始终针对存储库的根目录运行。**",
  "loc.input.label.custom": "自定义命令",
  "loc.input.help.custom": "传递到 dotnet.exe 进行执行的命令。",
  "loc.input.label.arguments": "参数",
  "loc.input.help.arguments": "所选命令的参数。例如，生成配置、输出文件夹、运行时。参数取决于所选命令。",
  "loc.input.label.restoreArguments": "参数",
  "loc.input.help.restoreArguments": "编写要传递到 restore**** 命令的其他参数。",
  "loc.input.label.publishTestResults": "发布测试结果和代码覆盖率",
  "loc.input.help.publishTestResults": "启用此选项将在 `$(Agent.TempDirectory)` 中生成测试结果 TRX 文件，并且结果将发布到服务器。<br>此选项将 `--logger trx --results-directory $(Agent.TempDirectory)` 附加到命令行参数。<br><br>可以通过在命令行参数中添加 `--collect \"Code coverage\"` 选项来收集代码覆盖率。目前仅适用于 Windows 平台。",
  "loc.input.label.testRunTitle": "测试运行标题",
  "loc.input.help.testRunTitle": "为测试运行提供一个名称。",
  "loc.input.label.zipAfterPublish": "压缩已发布的项目",
  "loc.input.help.zipAfterPublish": "如果为 true，将压缩发布命令创建的文件夹。",
  "loc.input.label.modifyOutputPath": "将项目的文件夹添加到发布路径",
  "loc.input.help.modifyOutputPath": "如果为 true，则在参数中显式指定输出路径时，通过发布命令创建的文件夹将在其文件夹名称前加上项目文件名。如果希望将多个项目发布到同一文件夹，这将很有用。",
  "loc.input.label.selectOrConfig": "要使用的源",
  "loc.input.help.selectOrConfig": "可以在此处选择 Azure Artifacts 和/或 NuGet.org 中的源，也可以将 nuget.config 文件提交到源代码存储库，并在此处设置其路径。",
  "loc.input.label.feedRestore": "使用此 Azure Artifacts 源中的包",
  "loc.input.help.feedRestore": "将所选源包含在生成的 NuGet.config 中。必须安装 Azure Artifacts 并授权才能在此处选择源。",
  "loc.input.label.includeNuGetOrg": "从 NuGet.org 使用包",
  "loc.input.help.includeNuGetOrg": "在生成的 NuGet.config 中包含 NuGet.org。",
  "loc.input.label.nugetConfigPath": "NuGet.config 的路径",
  "loc.input.help.nugetConfigPath": "存储库中用以指定从中还原包的源的 NuGet.config。",
  "loc.input.label.externalEndpoints": "用于此组织/集合外部的源的凭据",
  "loc.input.help.externalEndpoints": "用于位于所选 NuGet.config 中的外部注册表的凭据。对于此组织/集合中的源，请将其留空；将自动使用生成的凭据。",
  "loc.input.label.noCache": "禁用本地缓存",
  "loc.input.help.noCache": "阻止 NuGet 使用本地计算机缓存中的包。",
  "loc.input.label.packagesDirectory": "目标目录",
  "loc.input.help.packagesDirectory": "指定在其中安装包的文件夹。如果未指定任何文件夹，则包将还原到默认 NuGet 包缓存中。",
  "loc.input.label.verbosityRestore": "详细信息",
  "loc.input.help.verbosityRestore": "指定在输出中显示的详细信息量。",
  "loc.input.label.searchPatternPush": "要发布的 NuGet 包的路径",
  "loc.input.help.searchPatternPush": "要匹配的模式或要上传的 nupkg 文件的路径。多个模式可用分号分隔。",
  "loc.input.label.nuGetFeedType": "目标源位置",
  "loc.input.label.feedPublish": "目标源",
  "loc.input.help.feedPublish": "选择此组织中托管的源。必须安装 Azure Artifacts 并获得许可才能在此处选择源。",
  "loc.input.label.publishPackageMetadata": "发布管道元数据",
  "loc.input.help.publishPackageMetadata": "将此生成/发布管道的元数据(运行 #、源代码信息)与包关联",
  "loc.input.label.externalEndpoint": "NuGet 服务器",
  "loc.input.help.externalEndpoint": "包含外部 NuGet 服务器凭据的 NuGet 服务连接。",
  "loc.input.label.searchPatternPack": "要打包的 csproj 或 nuspec 文件的路径",
  "loc.input.help.searchPatternPack": "要打包的 csproj 或 nuspec 文件的搜索模式。\n\n可以使用分号分隔多个模式，并可通过在模式前加上 \"!\" 使其变为否定。示例: \"**/*.csproj;!**/*.Tests.csproj\"",
  "loc.input.label.configurationToPack": "包的配置",
  "loc.input.help.configurationToPack": "使用 csproj 文件时，这指定包的配置",
  "loc.input.label.outputDir": "包文件夹",
  "loc.input.help.outputDir": "将在其中创建包的文件夹。如果为空，则将在 csproj 文件旁创建包。",
  "loc.input.label.nobuild": "不生成",
  "loc.input.help.nobuild": "打包前不生成项目。对应于 --no-build 命令行参数。",
  "loc.input.label.includesymbols": "包括符号",
  "loc.input.help.includesymbols": "另外创建符号 NuGet 包。对应于 --include-symbols 命令行参数。",
  "loc.input.label.includesource": "包括源",
  "loc.input.help.includesource": "在包中包括源代码。对应于 --include-source 命令行参数。",
  "loc.input.label.versioningScheme": "自动包版本控制",
  "loc.input.help.versioningScheme": "不能与包含的引用项目一起使用。如果选择“使用日期和时间”，将生成格式为 \"X.Y.Z-ci-datetime\" 的 [SemVer](http://semver.org/spec/v1.0.0.html) 兼容版本，其中你可以选择 X、Y 和 Z。\n\n如果选择“使用环境变量”，则必须选择一个环境变量并确保它包含你要使用的版本号。\n\n如果选择“使用生成号”，则将使用生成号确定包的版本。**请注意:** 在“选项”下，将生成号格式设置为 \"[$(BuildDefinitionName)_$(Year:yyyy).$(Month).$(DayOfMonth)$(Rev:.r)](https://go.microsoft.com/fwlink/?LinkID=627416)\"。",
  "loc.input.label.versionEnvVar": "环境变量",
  "loc.input.help.versionEnvVar": "输入变量名称，其中不含 $、$env 或 %。",
  "loc.input.label.requestedMajorVersion": "主版本",
  "loc.input.help.requestedMajorVersion": "版本 [X.Y.Z] 中的 \"X\"(http://semver.org/spec/v1.0.0.html)",
  "loc.input.label.requestedMinorVersion": "次版本",
  "loc.input.help.requestedMinorVersion": "版本 [X.Y.Z] 中的 \"Y\"(http://semver.org/spec/v1.0.0.html)",
  "loc.input.label.requestedPatchVersion": "修补",
  "loc.input.help.requestedPatchVersion": "版本 [X.Y.Z] 中的 \"Z\"(http://semver.org/spec/v1.0.0.html)",
  "loc.input.label.buildProperties": "其他生成属性",
  "loc.input.help.buildProperties": "指定令牌 = 值对列表，用分号分隔，其中 .nuspec 文件中 $token$ 的每个匹配项都将替换为给定的值。值可以是用引号引起来的字符串。",
  "loc.input.label.verbosityPack": "详细信息",
  "loc.input.help.verbosityPack": "指定在输出中显示的详细信息量。",
  "loc.input.label.workingDirectory": "工作目录",
  "loc.input.help.workingDirectory": "运行脚本的当前工作目录。存储库(内部版本)或项目(发行版本)的根路径$(System.DefaultWorkingDirectory)为空。项目搜索模式与工作目录**不**相关。",
  "loc.messages.BuildIdentityPermissionsHint": "对于内部源，请确保生成服务标识“%s”[%s] 有权对其进行访问。",
  "loc.messages.CouldNotSetCodePaging": "由于以下错误，无法设置代码分页: %s",
  "loc.messages.Error_AutomaticallyVersionReleases": "自动版本控制: 不支持在发布中从生成选项获取版本号",
  "loc.messages.Error_CommandNotRecognized": "无法识别命令 %s。",
  "loc.messages.Error_NoSourceSpecifiedForPush": "未指定用于推送的源",
  "loc.messages.Error_NoValueFoundForEnvVar": "未找到提供的环境变量的值。",
  "loc.messages.Error_NoVersionFoundInBuildNumber": "未在以下环境变量中找到版本号数据: BUILD_BUILDNUMBER。变量的值应包含具有以下格式的子字符串: X.Y.Z 或 X.Y.Z.A，其中 A、X、Y 和 Z 为正整数。",
  "loc.messages.Error_PackageFailure": "尝试打包文件时出错。",
  "loc.messages.Error_PushNotARegularFile": "%s 不是文件。请检查任务的“nupkg 的路径/模式”属性。",
  "loc.messages.Info_AttemptingToPackFile": "尝试打包文件:",
  "loc.messages.Info_NoPackagesMatchedTheSearchPattern": "没有包匹配该搜索模式。",
  "loc.messages.Info_NoFilesMatchedTheSearchPattern": "没有文件匹配该搜索模式。",
  "loc.messages.PackagesFailedToInstall": "包还原失败",
  "loc.messages.PackagesFailedToPublish": "包发布失败",
  "loc.messages.PackagesInstalledSuccessfully": "包还原成功",
  "loc.messages.PackagesPublishedSuccessfully": "已成功发布包",
  "loc.messages.UnknownFeedType": "未知的源类型“%s”",
  "loc.messages.Warning_AutomaticallyVersionReferencedProjects": "“自动包版本控制”不能与“包括引用项目”选项一起使用。引用项目不会继承由自动版本控制设置提供的自定义版本。",
  "loc.messages.Warning_MoreThanOneVersionInBuildNumber": "在 BUILD_BUILDNUMBER 中找到版本数据的多个实例。假定第一个实例是版本。",
  "loc.messages.dotnetCommandFailed": "Dotnet 命令失败，以下项目具有非零退出代码: %s",
  "loc.messages.noProjectFilesFound": "未找到匹配指定模式的项目文件。",
  "loc.messages.noPublishFolderFoundToZip": "无法找到项目文件 %s 的要压缩的发布文件夹。",
  "loc.messages.noWebProjectFound": "未在存储库中找到任何 Web 项目。可通过目录中的 web.config 文件或 wwwroot 文件夹，或者通过在项目文件中使用 Microsoft.Net.Web.Sdk 来识别 Web 项目。如果你的项目未遵循此约定或你想发布 Web 项目之外的项目，可将 Publish Web Projects 属性设为 false (yml 中为 publishWebProjects: false)。",
  "loc.messages.zipFailed": "Zip 失败，出现错误: %s",
  "loc.messages.Error_ApiKeyNotSupported": "DotNetCore 目前不支持使用加密 API 密钥。",
  "loc.messages.Error_ExpectedConfigurationElement": "xml 无效。元素名应为“配置”。",
  "loc.messages.Error_NoMatchingFilesFoundForPattern": "在搜索模式 %s 下找不到匹配的文件",
  "loc.messages.Error_NoUrlWasFoundWhichMatches": "对于 %s 未找到任何下载 URL",
  "loc.messages.Error_NoVersionWasFoundWhichMatches": "未找到任何匹配输入 %s 的版本",
  "loc.messages.Error_NuGetToolInstallerFailer": "工具安装失败: %s",
  "loc.messages.Info_AvailableVersions": "可用版本: %s",
  "loc.messages.Info_ExpectBehaviorChangeWhenUsingVersionQuery": "你正在版本字符串上使用查询匹配。NuGet 更新到新版本时可能出现行为更改或重大更改。",
  "loc.messages.Info_MatchingUrlWasFoundSettingAuth": "对以下 URI 使用身份验证信息:",
  "loc.messages.Info_ResolvedToolFromCache": "已从工具缓存 %s 中解析",
  "loc.messages.Info_SavingTempConfig": "正在将 NuGet.config 保存到临时配置文件。",
  "loc.messages.Info_UsingToolPath": "使用工具路径: %s",
  "loc.messages.Info_UsingVersion": "使用的版本: %s",
  "loc.messages.NGCommon_AddingSources": "设置 NuGet.config 中的凭据",
  "loc.messages.NGCommon_AreaNotFoundInSps": "无法定位“%s”[%s] 区域。你所在的地区可能无法使用包含该区域的服务。",
  "loc.messages.NGCommon_DetectedNuGetExtensionsPath": "已检测到 NuGet 扩展加载程序路径(NUGET_EXTENSIONS_PATH 环境变量): %s",
  "loc.messages.NGCommon_DetectedNuGetVersion": "检测到 NuGet 版本 %s / %s",
  "loc.messages.NGCommon_IgnoringNuGetExtensionsPath": "已检测到 NuGet 扩展加载程序路径(NUGET_EXTENSIONS_PATH 环境变量)。使用内置 NuGet 客户端时忽略这些扩展",
  "loc.messages.NGCommon_NoSourcesFoundInConfig": "没有在 %s 处找到 NuGet.config 文件中的包源",
  "loc.messages.NGCommon_NuGetConfigIsInvalid": "%s 处的 NuGet.config 无效。",
  "loc.messages.NGCommon_NuGetConfigIsPackagesConfig": "在 %s 处应有 NuGet.config 文件，但其内容似乎是 packages.config 文件。请检查 %s 任务的设置并确认选择的是 NuGet.config，而不是 packages.config。",
  "loc.messages.NGCommon_RemovingSources": "准备设置 NuGet.config 中的凭据",
  "loc.messages.NGCommon_SpsNotFound": "无法找到“%s”[%s] 区域。Team Foundation Server 安装可能存在问题。",
  "loc.messages.NGCommon_UnabletoDetectNuGetVersion": "选择了未知的 NuGet 版本。",
  "loc.messages.NGCommon_UnableToFindTool": "无法找到工具 %s",
  "loc.messages.Warning_SessionCreationFailed": "无法创建出处会话: %s",
  "loc.messages.Warning_UpdatingNuGetVersion": "将 NuGet.exe 的版本从 %s 更新为 %s。当 NuGet 更新到新版本时，可能会发生行为更改或重大更改。如果不想更新，请取消选择任务中的“检查最新版本”选项。",
  "loc.messages.Net5Update": "信息: Azure Pipelines 托管的代理已经过更新，现在除了当前为 LTS 的更低版本的 .Net Core 以外，还包含 .Net 5.x SDK/运行时。除非你已锁定一个 SDK 版本供你的项目使用，否则可能会选择 5.x SDK，而与先前版本相比，这可能会中断行为。有关中断性变更，可在此处了解详细信息: https://docs.microsoft.com/zh-cn/dotnet/core/tools/ and https://docs.microsoft.com/en-us/dotnet/core/compatibility/。若要详细了解这类更改并进行故障排除，请查看此处: https://docs.microsoft.com/zh-cn/azure/devops/pipelines/tasks/build/dotnet-core-cli?view=azure-devops#troubleshooting",
  "loc.messages.Net5NugetVersionCompat": ".NET 5 与更低版本的 Nuget (版本不超过 5.7)存在一些兼容性问题，因此如果你在使用更低版本的 Nuget (且未使用 dotnet cli)进行还原，则依赖已还原的这类包的 dotnet cli 命令(例如 dotnet build)可能会失败。若要解决这种错误，可: (1) - 使用 dotnet cli 进行还原，(2) - 使用 Nuget 5.8 版本进行还原，(3) - 通过更低版本的 sdk (版本不超过 3)使用 global.json 来进行生成",
  "loc.messages.DeprecatedDotnet2_2_And_3_0": "信息: .NET Core SDK/运行时 2.2 和 3.0 现已到达生命周期结束(EOL)日期，已从所有托管的代理中将它们删除。如果你正在托管的代理上使用这些 SDK/运行时，请升级到尚未到达 EOL 的更新的版本，或者执行 UseDotNet 任务来安装所需的版本。"
}