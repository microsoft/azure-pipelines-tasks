{
    "id": "E28912F1-0114-4464-802A-A3A35437FD16",
    "name": "Docker",
    "friendlyName": "Docker",
    "description": "Build, tag, push, or run Docker images, or run a Docker command",
    "helpUrl": "https://docs.microsoft.com/azure/devops/pipelines/tasks/build/docker",
    "helpMarkDown": "[Learn more about this task](https://go.microsoft.com/fwlink/?linkid=848006)",
    "category": "Build",
    "visibility": [
        "Build",
        "Release"
    ],
    "author": "Microsoft Corporation",
    "version": {
        "Major": 0,
        "Minor": 187,
        "Patch": 2
    },
    "demands": [],
    "preview": "false",
    "groups": [
        {
            "name": "advanced",
            "displayName": "Advanced Options",
            "isExpanded": false
        }
    ],
    "inputs": [
        {
            "name": "containerregistrytype",
            "type": "pickList",
            "label": "Container Registry Type",
            "defaultValue": "Azure Container Registry",
            "required": true,
            "options": {
                "Azure Container Registry": "Azure Container Registry",
                "Container Registry": "Container Registry"
            },
            "helpMarkDown": "Select 'Azure Container Registry' to connect to it by using an Azure Service Connection. Select 'Container registry' to connect to Docker Hub or any other private container registry."
        },
        {
            "name": "dockerRegistryEndpoint",
            "aliases": [
                "dockerRegistryConnection"
            ],
            "type": "connectedService:dockerregistry",
            "label": "Docker Registry Service Connection",
            "helpMarkDown": "Select a Docker registry service connection. Required for commands that need to authenticate with a registry.",
            "visibleRule": "containerregistrytype = Container Registry"
        },
        {
            "name": "azureSubscriptionEndpoint",
            "aliases": [
                "azureSubscription"
            ],
            "type": "connectedService:AzureRM",
            "label": "Azure subscription",
            "helpMarkDown": "Select an Azure subscription",
            "visibleRule": "containerregistrytype = Azure Container Registry"
        },
        {
            "name": "azureContainerRegistry",
            "label": "Azure Container Registry",
            "type": "pickList",
            "helpMarkDown": "Select an Azure Container Registry in the selected Azure Subscription. The container image will be built and pushed to this container registry.",
            "visibleRule": "containerregistrytype = Azure Container Registry",
            "defaultValue": "",
            "properties": {
                "EditableOptions": "True"
            }
        },
        {
            "name": "action",
            "type": "pickList",
            "label": "Action",
            "defaultValue": "Build an image",
            "required": true,
            "options": {
                "Build an image": "Build an image",
                "Tag images": "Tag images",
                "Push an image": "Push an image",
                "Push images": "Push images",
                "Run an image": "Run an image",
                "Run a Docker command": "Run a Docker command"
            },
            "helpMarkDown": "Select a Docker action."
        },
        {
            "name": "dockerFile",
            "type": "filePath",
            "label": "Docker File",
            "defaultValue": "**/Dockerfile",
            "required": true,
            "visibleRule": "action = Build an image",
            "helpMarkDown": "Path to the Dockerfile."
        },
        {
            "name": "addBaseImageData",
            "type": "boolean",
            "label": "Add base image metadata to image(s)",
            "groupName": "commands",
            "defaultValue": "true",
            "helpMarkDown": "By default base image data like base image name and digest are added which helps with traceability. You can opt out of this default behavior by using this input."
        },
        {
            "name": "buildArguments",
            "type": "multiLine",
            "properties": {
                "resizable": "true",
                "rows": "2"
            },
            "label": "Build Arguments",
            "visibleRule": "action = Build an image",
            "helpMarkDown": "Build-time variables for the Docker file. Specify each name=value pair on a new line."
        },
        {
            "name": "defaultContext",
            "type": "boolean",
            "label": "Use Default Build Context",
            "defaultValue": "true",
            "visibleRule": "action = Build an image",
            "helpMarkDown": "Set the build context to the directory that contains the Docker file."
        },
        {
            "name": "context",
            "type": "filePath",
            "label": "Build Context",
            "visibleRule": "action = Build an image && defaultContext = false",
            "helpMarkDown": "Path to the build context."
        },
        {
            "name": "imageName",
            "type": "string",
            "label": "Image Name",
            "defaultValue": "$(Build.Repository.Name):$(Build.BuildId)",
            "required": true,
            "visibleRule": "action == Build an image || action == Push an image || action == Run an image",
            "helpMarkDown": "Name of the Docker image to build, push, or run."
        },
        {
            "name": "imageNamesPath",
            "type": "filePath",
            "label": "Image Names Path",
            "required": true,
            "visibleRule": "action == Tag images || action == Push images",
            "helpMarkDown": "Path to a text file that contains the names of the Docker images to tag or push. Each image name is contained on its own line."
        },
        {
            "name": "qualifyImageName",
            "type": "boolean",
            "label": "Qualify Image Name",
            "defaultValue": "true",
            "visibleRule": "action = Build an image || action = Tag images || action = Push an image || action = Push images || action = Run an image",
            "helpMarkDown": "Qualify the image name with the Docker registry service connection's hostname if not otherwise specified."
        },
        {
            "name": "additionalImageTags",
            "type": "multiLine",
            "properties": {
                "resizable": "true",
                "rows": "2"
            },
            "label": "Additional Image Tags",
            "visibleRule": "action = Build an image || action = Tag images || action = Push an image || action = Push images",
            "helpMarkDown": "Additional tags for the Docker image being built or pushed."
        },
        {
            "name": "includeSourceTags",
            "type": "boolean",
            "label": "Include Source Tags",
            "defaultValue": "false",
            "visibleRule": "action = Build an image || action = Tag image || action = Push an image || action = Push images",
            "helpMarkDown": "Include Git tags when building or pushing the Docker image."
        },
        {
            "name": "includeLatestTag",
            "type": "boolean",
            "label": "Include Latest Tag",
            "defaultValue": "false",
            "visibleRule": "action = Build an image || action = Push an image || action = Push images",
            "helpMarkDown": "Include the 'latest' tag when building or pushing the Docker image."
        },
        {
            "name": "imageDigestFile",
            "type": "filePath",
            "label": "Image Digest File",
            "visibleRule": "action = Push an image || action = Push images",
            "helpMarkDown": "Path to a file that is created and populated with the full image repository digest of the Docker image that was pushed."
        },
        {
            "name": "containerName",
            "type": "string",
            "label": "Container Name",
            "visibleRule": "action = Run an image",
            "helpMarkDown": "Name of the Docker container to run."
        },
        {
            "name": "ports",
            "type": "multiLine",
            "properties": {
                "resizable": "true",
                "rows": "2"
            },
            "label": "Ports",
            "visibleRule": "action = Run an image",
            "helpMarkDown": "Ports in the Docker container to publish to the host. Specify each host-port:container-port binding on a new line."
        },
        {
            "name": "volumes",
            "type": "multiLine",
            "properties": {
                "resizable": "true",
                "rows": "2"
            },
            "label": "Volumes",
            "visibleRule": "action = Run an image",
            "helpMarkDown": "Volumes to mount from the host. Specify each host-dir:container-dir on a new line."
        },
        {
            "name": "envVars",
            "type": "multiLine",
            "properties": {
                "resizable": "true",
                "rows": "2"
            },
            "label": "Environment Variables",
            "visibleRule": "action = Run an image",
            "helpMarkDown": "Environment variables for the Docker container. Specify each name=value pair on a new line."
        },
        {
            "name": "workDir",
            "type": "string",
            "label": "Working Directory",
            "visibleRule": "action = Run an image",
            "helpMarkDown": "The working directory for the Docker container."
        },
        {
            "name": "entrypoint",
            "type": "string",
            "label": "Entry Point Override",
            "visibleRule": "action = Run an image",
            "helpMarkDown": "Override the default entry point for the Docker container."
        },
        {
            "name": "containerCommand",
            "type": "string",
            "label": "Command",
            "visibleRule": "action = Run an image",
            "helpMarkDown": "The docker run command first creates a writeable container layer over the specified image, and then starts it by using the specified run command. For example, if the image contains a simple Python Flask web application you can specify 'python app.py' to launch the web application."
        },
        {
            "name": "detached",
            "type": "boolean",
            "label": "Run In Background",
            "defaultValue": "true",
            "visibleRule": "action = Run an image",
            "helpMarkDown": "Run the Docker container in the background."
        },
        {
            "name": "restartPolicy",
            "type": "pickList",
            "label": "Restart Policy",
            "defaultValue": "no",
            "required": true,
            "options": {
                "no": "No",
                "onFailure": "On failure",
                "always": "Always",
                "unlessStopped": "Unless stopped"
            },
            "visibleRule": "action = Run an image && detached = true",
            "helpMarkDown": "Select a restart policy."
        },
        {
            "name": "restartMaxRetries",
            "type": "string",
            "label": "Maximum Restart Retries",
            "visibleRule": "action = Run an image && detached = true && restartPolicy = onFailure",
            "helpMarkDown": "The maximum number of restart retries the Docker daemon attempts."
        },
        {
            "name": "customCommand",
            "type": "string",
            "label": "Command",
            "required": true,
            "visibleRule": "action = Run a Docker command",
            "helpMarkDown": "Docker command to execute, with arguments. For example, 'rmi -f image-name' to force remove an image."
        },
        {
            "name": "dockerHostEndpoint",
            "type": "connectedService:dockerhost",
            "label": "Docker Host Service Connection",
            "helpMarkDown": "Select a Docker host service connection. Defaults to the agent's host.",
            "groupName": "advanced"
        },
        {
            "name": "enforceDockerNamingConvention",
            "type": "boolean",
            "label": "Force image name to follow Docker naming convention",
            "required": false,
            "defaultValue": "true",
            "helpMarkDown": "If enabled docker image name will be modified to follow Docker naming convention. Converts upper case character to lower case and removes spaces in image name.",
            "groupName": "advanced"
        },
        {
            "name": "cwd",
            "aliases": [
                "workingDirectory"
            ],
            "type": "filePath",
            "label": "Working Directory",
            "defaultValue": "$(System.DefaultWorkingDirectory)",
            "helpMarkDown": "Working directory for the Docker command.",
            "groupName": "advanced"
        },
        {
            "name": "memory",
            "type": "string",
            "label": "Memory limit",
            "helpMarkDown": "The maximum amount of memory available to the container as a integer with optional suffixes like '2GB'.",
            "groupName": "advanced"
        }
    ],
    "dataSourceBindings": [
        {
            "target": "azureContainerRegistry",
            "endpointId": "$(azureSubscriptionEndpoint)",
            "dataSourceName": "AzureRMContainerRegistries",
            "resultTemplate": "{\"Value\":\"{\\\"loginServer\\\":\\\"{{{properties.loginServer}}}\\\", \\\"id\\\" : \\\"{{{id}}}\\\"}\",\"DisplayValue\":\"{{{name}}}\"}"
        }
    ],
    "outputVariables": [
        {
            "name": "DockerOutput",
            "description": "Stores the output of the docker command"
        },
        {
            "name": "DockerOutputPath",
            "description": "The path of the file which contains the output of the build command." 
        }
    ],
    "instanceNameFormat": "$(action)",
    "execution": {
        "Node10": {
            "target": "container.js"
        }
    },
    "messages": {
        "ContainerPatternFound": "Pattern found in docker filepath parameter",
        "ContainerPatternNotFound": "No pattern found in docker filepath parameter",
        "ContainerDockerFileNotFound": "No Docker file matching  %s  was found.",
        "ConnectingToDockerHost": "DOCKER_HOST variable is set. Docker will try to connect to the Docker host: %s",
        "DockerHostVariableWarning": "DOCKER_HOST variable is set. Please ensure that the Docker daemon is running on: %s",
        "NoImagesInImageNamesFile": "At least one image name is expected in file '%s'.",
        "CantWriteDataToFile": "Can not write data to the file %s. Error: %s",
        "NoDataWrittenOnFile": "No data was written into the file %s",
        "FileContentSynced": "Synced the file content to the disk. The content is %s.",
        "OutputVariableDataSizeExceeded": "Output variable not set as Docker command output exceeded the maximum supported length. Output length: %s, Maximum supported length: %s",
        "WritingDockerConfigToTempFile": "Writing Docker config to temp file. File path: %s, Docker config: %s"
    }
}