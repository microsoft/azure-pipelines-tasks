{
  "loc.friendlyName": "Gradle",
  "loc.helpMarkDown": "[Learn more about this task](https://go.microsoft.com/fwlink/?LinkID=613720) or [see the Gradle documentation](https://docs.gradle.org/current/userguide/userguide.html)",
  "loc.description": "Build using a Gradle wrapper script",
  "loc.instanceNameFormat": "gradlew $(tasks)",
  "loc.releaseNotes": "Configuration of the SonarQube analysis was moved to the [SonarQube](https://marketplace.visualstudio.com/items?itemName=SonarSource.sonarqube) or [SonarCloud](https://marketplace.visualstudio.com/items?itemName=SonarSource.sonarcloud) extensions, in task `Prepare Analysis Configuration`",
  "loc.group.displayName.junitTestResults": "JUnit Test Results",
  "loc.group.displayName.codeCoverage": "Code Coverage",
  "loc.group.displayName.advanced": "Advanced",
  "loc.group.displayName.CodeAnalysis": "Code Analysis",
  "loc.input.label.wrapperScript": "Gradle wrapper",
  "loc.input.help.wrapperScript": "Relative path from the repository root to the Gradle Wrapper script.",
  "loc.input.label.cwd": "Working directory",
  "loc.input.help.cwd": "Working directory in which to run the Gradle build. If not specified, the repository root directory is used.",
  "loc.input.label.options": "Options",
  "loc.input.label.tasks": "Tasks",
  "loc.input.label.publishJUnitResults": "Publish to Azure Pipelines",
  "loc.input.help.publishJUnitResults": "Select this option to publish JUnit test results produced by the Gradle build to Azure Pipelines. Each test results file matching `Test Results Files` will be published as a test run in Azure Pipelines.",
  "loc.input.label.testResultsFiles": "Test results files",
  "loc.input.help.testResultsFiles": "Test results files path. Wildcards can be used ([more information](https://go.microsoft.com/fwlink/?linkid=856077)). For example, `**/TEST-*.xml` for all XML files whose name starts with TEST-.",
  "loc.input.label.testRunTitle": "Test run title",
  "loc.input.help.testRunTitle": "Provide a name for the test run.",
  "loc.input.label.codeCoverageTool": "Code coverage tool",
  "loc.input.help.codeCoverageTool": "Select the code coverage tool.",
  "loc.input.label.classFilesDirectories": "Class files directories",
  "loc.input.help.classFilesDirectories": "Comma-separated list of directories containing class files and archive files (JAR, WAR, etc.). Code coverage is reported for class files in these directories. Normally, classes under `build/classes/java/main` (for Gradle 4+) are searched, which is the default class directory for Gradle builds",
  "loc.input.label.classFilter": "Class inclusion/exclusion filters",
  "loc.input.help.classFilter": "Comma-separated list of filters to include or exclude classes from collecting code coverage. For example: +:com.*,+:org.*,-:my.app*.*.",
  "loc.input.label.failIfCoverageEmpty": "Fail when code coverage results are missing",
  "loc.input.help.failIfCoverageEmpty": "Fail the build if code coverage did not produce any results to publish.",
  "loc.input.label.gradle5xOrHigher": "Gradle version >= 5.x",
  "loc.input.help.gradle5xOrHigher": "Set this to 'true' if gradle version is >= 5.x.'True' by default.",
  "loc.input.label.javaHomeSelection": "Set JAVA_HOME by",
  "loc.input.help.javaHomeSelection": "Sets JAVA_HOME either by selecting a JDK version that will be discovered during builds or by manually entering a JDK path.",
  "loc.input.label.jdkVersion": "JDK version",
  "loc.input.help.jdkVersion": "Will attempt to discover the path to the selected JDK version and set JAVA_HOME accordingly.",
  "loc.input.label.jdkUserInputPath": "JDK path",
  "loc.input.help.jdkUserInputPath": "Sets JAVA_HOME to the given path.",
  "loc.input.label.jdkArchitecture": "JDK architecture",
  "loc.input.help.jdkArchitecture": "Optionally supply the architecture (x86, x64) of the JDK.",
  "loc.input.label.gradleOpts": "Set GRADLE_OPTS",
  "loc.input.help.gradleOpts": "Sets the GRADLE_OPTS environment variable, which is used to send command-line arguments to start the JVM. The xmx flag specifies the maximum memory available to the JVM.",
  "loc.input.label.sqAnalysisEnabled": "Run SonarQube or SonarCloud Analysis",
  "loc.input.help.sqAnalysisEnabled": "This option has changed from version 1 of the **Gradle** task to use the [SonarQube](https://marketplace.visualstudio.com/items?itemName=SonarSource.sonarqube) and [SonarCloud](https://marketplace.visualstudio.com/items?itemName=SonarSource.sonarcloud) marketplace extensions. Enable this option to run [SonarQube or SonarCloud analysis](http://redirect.sonarsource.com/doc/install-configure-scanner-tfs-ts.html) after executing tasks in the **Tasks** field. You must also add a **Prepare Analysis Configuration** task from one of the extensions to the build pipeline before this Gradle task.",
  "loc.input.label.sqGradlePluginVersionChoice": "SonarQube scanner for Gradle version",
  "loc.input.help.sqGradlePluginVersionChoice": "The SonarQube Gradle plugin version to use. You can declare it in your Gradle configuration file, or specify a version here.",
  "loc.input.label.sqGradlePluginVersion": "SonarQube scanner for Gradle plugin version",
  "loc.input.help.sqGradlePluginVersion": "Refer to https://plugins.gradle.org/plugin/org.sonarqube for all available versions.",
  "loc.input.label.checkstyleAnalysisEnabled": "Run Checkstyle",
  "loc.input.help.checkstyleAnalysisEnabled": "Run the Checkstyle tool with the default Sun checks. Results are uploaded as build artifacts.",
  "loc.input.label.findbugsAnalysisEnabled": "Run FindBugs",
  "loc.input.help.findbugsAnalysisEnabled": "Use the FindBugs static analysis tool to look for bugs in the code. Results are uploaded as build artifacts. In Gradle 6.0 this plugin was removed. Use spotbugs plugin instead. [More info](https://docs.gradle.org/current/userguide/upgrading_version_5.html#the_findbugs_plugin_has_been_removed)",
  "loc.input.label.pmdAnalysisEnabled": "Run PMD",
  "loc.input.help.pmdAnalysisEnabled": "Use the PMD Java static analysis tool to look for bugs in the code. Results are uploaded as build artifacts.",
  "loc.input.label.spotBugsAnalysisEnabled": "Run SpotBugs",
  "loc.input.help.spotBugsAnalysisEnabled": "Enable this option to run spotBugs. This plugin works with Gradle v5.6 or later. [More info](https://spotbugs.readthedocs.io/en/stable/gradle.html#use-spotbugs-gradle-plugin)",
  "loc.input.label.spotBugsGradlePluginVersionChoice": "Spotbugs plugin version",
  "loc.input.help.spotBugsGradlePluginVersionChoice": "The Spotbugs Gradle plugin version to use. You can declare it in your Gradle configuration file, or specify a version here.",
  "loc.input.label.spotbugsGradlePluginVersion": "Version number",
  "loc.input.help.spotbugsGradlePluginVersion": "Refer to https://plugins.gradle.org/plugin/com.github.spotbugs for all available versions.",
  "loc.messages.sqCommon_CreateTaskReport_MissingField": "Failed to create TaskReport object. Missing field: %s",
  "loc.messages.sqCommon_WaitingForAnalysis": "Waiting for the SonarQube server to analyse the build.",
  "loc.messages.sqCommon_NotWaitingForAnalysis": "Build not configured to wait for the SonarQube analysis. Detailed quality gate status will not be available.",
  "loc.messages.sqCommon_QualityGateStatusUnknown": "Could not detect the quality gate status or a new status has been introduced.",
  "loc.messages.sqCommon_InvalidResponseFromServer": "Server responded with an invalid or unexpected response format.",
  "loc.messages.codeAnalysis_ToolIsEnabled": "%s analysis is enabled.",
  "loc.messages.codeAnalysis_ToolFailed": "%s analysis failed.",
  "loc.messages.sqAnalysis_IncrementalMode": "Detected a PR build - running the SonarQube analysis in incremental mode",
  "loc.messages.sqAnalysis_BuildSummaryTitle": "SonarQube Analysis Report",
  "loc.messages.sqAnalysis_TaskReportInvalid": "Invalid or missing task report. Check SonarQube finished successfully.",
  "loc.messages.sqAnalysis_BuildSummary_LinkText": "Detailed SonarQube report",
  "loc.messages.sqAnalysis_BuildSummary_CannotAuthenticate": "Cannot authenticate to the SonarQube server. Check the saved service connection details and the status of the server.",
  "loc.messages.sqAnalysis_AnalysisTimeout": "The analysis did not complete in the allotted time of %d seconds.",
  "loc.messages.sqAnalysis_IsPullRequest_SkippingBuildSummary": "Pull request build: detailed SonarQube build summary will not be available.",
  "loc.messages.sqAnalysis_IsPullRequest_SkippingBuildBreaker": "Pull request build: build will not be broken if quality gate fails.",
  "loc.messages.sqAnalysis_BuildBrokenDueToQualityGateFailure": "The SonarQube quality gate associated with this build has failed.",
  "loc.messages.sqAnalysis_QualityGatePassed": "The SonarQube quality gate associated with this build has passed (status %s)",
  "loc.messages.sqAnalysis_UnknownComparatorString": "The SonarQube build summary encountered a problem: unknown comparator '%s'",
  "loc.messages.sqAnalysis_NoUnitsFound": "The list of SonarQube measurement units could not be retrieved from the server.",
  "loc.messages.sqAnalysis_NoReportTask": "Could not find report-task.txt. Possible cause: the SonarQube analysis did not complete successfully.",
  "loc.messages.sqAnalysis_MultipleReportTasks": "Multiple report-task.txt files found. Choosing the first one. The build summary and the build breaker may not be accurate. Possible cause: multiple SonarQube analysis during the same build, which is not supported.",
  "loc.messages.codeAnalysisBuildSummaryLine_SomeViolationsSomeFiles": "%s found %d violations in %d files.",
  "loc.messages.codeAnalysisBuildSummaryLine_SomeViolationsOneFile": "%s found %d violations in 1 file.",
  "loc.messages.codeAnalysisBuildSummaryLine_OneViolationOneFile": "%s found 1 violation in 1 file.",
  "loc.messages.codeAnalysisBuildSummaryLine_NoViolations": "%s found no violations.",
  "loc.messages.codeAnalysisBuildSummaryTitle": "Code Analysis Report",
  "loc.messages.codeAnalysisArtifactSummaryTitle": "Code Analysis Results",
  "loc.messages.codeAnalysisDisabled": "Code analysis is disabled outside of the build environment. Could not find a value for: %s",
  "loc.messages.LocateJVMBasedOnVersionAndArch": "Locate JAVA_HOME for Java %s %s",
  "loc.messages.UnsupportedJdkWarning": "JDK 9 and JDK 10 are out of support. Please switch to a later version in your project and pipeline. Attempting to build with JDK 11...",
  "loc.messages.FailedToLocateSpecifiedJVM": "Failed to find the specified JDK version. Please ensure the specified JDK version is installed on the agent and the environment variable '%s' exists and is set to the location of a corresponding JDK or use the [Java Tool Installer](https://go.microsoft.com/fwlink/?linkid=875287) task to install the desired JDK.",
  "loc.messages.NoCodeCoverage": "No code coverage results were found to publish.",
  "loc.messages.InvalidBuildFile": "Invalid or unsupported build file",
  "loc.messages.FileNotFound": "File or folder doesn't exist: %s",
  "loc.messages.FailedToAppendCC": "Unable to append code coverage data: %s",
  "loc.messages.NoTestResults": "No test result files matching %s were found, so publishing JUnit test results is being skipped."
}