{
  "loc.friendlyName": "Docker Compose",
  "loc.helpMarkDown": "[Learn more about this task](https://go.microsoft.com/fwlink/?linkid=848006) or [see the Docker Compose documentation](https://docs.docker.com/)",
  "loc.description": "Build, push or run multi-container Docker applications. Task can be used with Docker or Azure Container registry.",
  "loc.instanceNameFormat": "$(action)",
  "loc.group.displayName.advanced": "Advanced Options",
  "loc.input.label.containerregistrytype": "Container Registry Type",
  "loc.input.help.containerregistrytype": "Select a Container Registry Type.",
  "loc.input.label.dockerRegistryEndpoint": "Docker Registry Service Connection",
  "loc.input.help.dockerRegistryEndpoint": "Select a Docker registry service connection. Required for commands that need to authenticate with a registry.",
  "loc.input.label.azureSubscriptionEndpoint": "Azure subscription",
  "loc.input.help.azureSubscriptionEndpoint": "Select an Azure subscription",
  "loc.input.label.azureContainerRegistry": "Azure Container Registry",
  "loc.input.help.azureContainerRegistry": "Select an Azure Container Registry",
  "loc.input.label.dockerComposeFile": "Docker Compose File",
  "loc.input.help.dockerComposeFile": "Path to the primary Docker Compose file to use.",
  "loc.input.label.additionalDockerComposeFiles": "Additional Docker Compose Files",
  "loc.input.help.additionalDockerComposeFiles": "Additional Docker Compose files to be combined with the primary Docker Compose file. Relative paths are resolved relative to the directory containing the primary Docker Compose file. If a specified file is not found, it is ignored. Specify each file path on a new line.",
  "loc.input.label.dockerComposeFileArgs": "Environment Variables",
  "loc.input.help.dockerComposeFileArgs": "Environment variables to be set during the command. Specify each name=value pair on a new line.",
  "loc.input.label.projectName": "Project Name",
  "loc.input.help.projectName": "Project name used for default naming of images and containers.",
  "loc.input.label.qualifyImageNames": "Qualify Image Names",
  "loc.input.help.qualifyImageNames": "Qualify image names for built services with the Docker registry service connection's hostname if not otherwise specified.",
  "loc.input.label.action": "Action",
  "loc.input.help.action": "Select a Docker Compose action.",
  "loc.input.label.additionalImageTags": "Additional Image Tags",
  "loc.input.help.additionalImageTags": "Additional tags for the Docker images being built or pushed.",
  "loc.input.label.includeSourceTags": "Include Source Tags",
  "loc.input.help.includeSourceTags": "Include Git tags when building or pushing Docker images.",
  "loc.input.label.includeLatestTag": "Include Latest Tag",
  "loc.input.help.includeLatestTag": "Include the 'latest' tag when building or pushing Docker images.",
  "loc.input.label.buildImages": "Build Images",
  "loc.input.help.buildImages": "Build images before starting service containers.",
  "loc.input.label.serviceName": "Service Name",
  "loc.input.help.serviceName": "Name of the specific service to run.",
  "loc.input.label.containerName": "Container Name",
  "loc.input.help.containerName": "Name of the specific service container to run.",
  "loc.input.label.ports": "Ports",
  "loc.input.help.ports": "Ports in the specific service container to publish to the host. Specify each host-port:container-port binding on a new line.",
  "loc.input.label.workDir": "Working Directory",
  "loc.input.help.workDir": "The working directory for the specific service container.",
  "loc.input.label.entrypoint": "Entry Point Override",
  "loc.input.help.entrypoint": "Override the default entry point for the specific service container.",
  "loc.input.label.containerCommand": "Command",
  "loc.input.help.containerCommand": "Command to run in the specific service container. For example, if the image contains a simple Python Flask web application you can specify 'python app.py' to launch the web application.",
  "loc.input.label.detached": "Run in Background",
  "loc.input.help.detached": "Run the service containers in the background.",
  "loc.input.label.abortOnContainerExit": "Abort on Container Exit",
  "loc.input.help.abortOnContainerExit": "Stop all containers when any container exits.",
  "loc.input.label.imageDigestComposeFile": "Image Digest Compose File",
  "loc.input.help.imageDigestComposeFile": "Path to a Docker Compose file that is created and populated with the full image repository digests of each service's Docker image.",
  "loc.input.label.removeBuildOptions": "Remove Build Options",
  "loc.input.help.removeBuildOptions": "Remove the build options from the output Docker Compose file.",
  "loc.input.label.baseResolveDirectory": "Base Resolve Directory",
  "loc.input.help.baseResolveDirectory": "The base directory from which relative paths in the output Docker Compose file should be resolved.",
  "loc.input.label.outputDockerComposeFile": "Output Docker Compose File",
  "loc.input.help.outputDockerComposeFile": "Path to an output Docker Compose file.",
  "loc.input.label.dockerComposeCommand": "Command",
  "loc.input.help.dockerComposeCommand": "Docker Compose command to execute with arguments. For example, 'rm --all' to remove all stopped service containers.",
  "loc.input.label.arguments": "Arguments",
  "loc.input.help.arguments": "Docker Compose command options. Ex:<br> For build command,<br>--pull --compress --parallel",
  "loc.input.label.dockerHostEndpoint": "Docker Host Service Connection",
  "loc.input.help.dockerHostEndpoint": "Select a Docker host service connection. Defaults to the agent's host.",
  "loc.input.label.nopIfNoDockerComposeFile": "No-op if no Docker Compose File",
  "loc.input.help.nopIfNoDockerComposeFile": "If the Docker Compose file does not exist, skip this task. This is useful when the task offers optional behavior based on the existence of a Docker Compose file in the repository.",
  "loc.input.label.requireAdditionalDockerComposeFiles": "Require Additional Docker Compose Files",
  "loc.input.help.requireAdditionalDockerComposeFiles": "Produces an error if the additional Docker Compose files do not exist. This overrides the default behavior which is to ignore a file if it does not exist.",
  "loc.input.label.cwd": "Working Directory",
  "loc.input.help.cwd": "Working directory for the Docker Compose command.",
  "loc.input.label.dockerComposePath": "Docker Compose executable Path",
  "loc.input.help.dockerComposePath": "This docker-compose executable will be used if the path is provided",
  "loc.messages.ConnectingToDockerHost": "DOCKER_HOST variable is set. Docker will try to connect to the Docker host: %s",
  "loc.messages.ContainerPatternFound": "Pattern found in docker compose filepath parameter",
  "loc.messages.ContainerPatternNotFound": "No pattern found in docker compose filepath parameter",
  "loc.messages.ContainerDockerFileNotFound": "No Docker file matching  %s  was found.",
  "loc.messages.AdditionalDockerComposeFileDoesNotExists": "Additional Docker Compose File %s does not exists.",
  "loc.messages.CantWriteDataToFile": "Can not write data to the file %s. Error: %s",
  "loc.messages.DockerHostVariableWarning": "DOCKER_HOST variable is set. Please ensure that the Docker daemon is running on: %s",
  "loc.messages.NoDataWrittenOnFile": "No data was written into the file %s",
  "loc.messages.FileContentSynced": "Synced the file content to the disk. The content is %s.",
  "loc.messages.ImageNameWithoutTag": "Image name not specified with tag, pushing all tags of the image specified.",
  "loc.messages.WritingDockerConfigToTempFile": "Writing Docker config to temp file. File path: %s, Docker config: %s"
}