{
  "loc.friendlyName": "Docker Compose",
  "loc.helpMarkDown": "[Learn more about this task](https://go.microsoft.com/fwlink/?linkid=848006) or [see the Docker Compose documentation](https://docs.docker.com/)",
  "loc.description": "複数コンテナーの Docker アプリケーションをビルド、プッシュ、実行します。タスクは、Docker または Azure Container Registry で使用できます。",
  "loc.instanceNameFormat": "$(action)",
  "loc.group.displayName.advanced": "詳細設定のオプション",
  "loc.input.label.containerregistrytype": "コンテナー レジストリの種類",
  "loc.input.help.containerregistrytype": "コンテナー レジストリの種類を選択します。",
  "loc.input.label.dockerRegistryEndpoint": "Docker レジストリ サービス接続",
  "loc.input.help.dockerRegistryEndpoint": "Docker レジストリ サービス接続を選択します。レジストリを使って認証する必要のあるコマンドの場合に必要です。",
  "loc.input.label.azureSubscriptionEndpoint": "Azure サブスクリプション",
  "loc.input.help.azureSubscriptionEndpoint": "Azure サブスクリプションを選択します",
  "loc.input.label.azureContainerRegistry": "Azure Container Registry",
  "loc.input.help.azureContainerRegistry": "Azure Container Registry を選択します",
  "loc.input.label.dockerComposeFile": "Docker Compose ファイル",
  "loc.input.help.dockerComposeFile": "使用するプライマリ Docker Compose ファイルへのパスです。",
  "loc.input.label.additionalDockerComposeFiles": "追加の Docker Compose ファイル",
  "loc.input.help.additionalDockerComposeFiles": "プライマリ Docker Compose ファイルに結合する追加の Docker Compose ファイルです。相対パスは、プライマリ Docker Compose ファイルの入っているディレクトリを基準にして解決されます。指定されたファイルが見つからない場合、そのファイルは無視されます。それぞれのファイル パスを新しい行ごとに指定します。",
  "loc.input.label.dockerComposeFileArgs": "環境変数",
  "loc.input.help.dockerComposeFileArgs": "コマンドの実行中に設定する環境変数です。名前=値のペアを新しい行ごとに指定します。",
  "loc.input.label.projectName": "プロジェクト名 ",
  "loc.input.help.projectName": "イメージとコンテナーの既定の名前付けで使うプロジェクト名です。",
  "loc.input.label.qualifyImageNames": "イメージ名を修飾",
  "loc.input.help.qualifyImageNames": "特に指定されていない場合、ビルド サービスのイメージ名を Docker レジストリ サービス接続のホスト名で修飾します。",
  "loc.input.label.action": "アクション",
  "loc.input.help.action": "Docker Compose アクションを選択します。",
  "loc.input.label.additionalImageTags": "追加のイメージ タグ",
  "loc.input.help.additionalImageTags": "ビルドまたはプッシュされている Docker イメージの追加タグです。",
  "loc.input.label.includeSourceTags": "ソース タグを含める",
  "loc.input.help.includeSourceTags": "Docker イメージをビルドまたはプッシュするときに、Git タグを組み込みます。",
  "loc.input.label.includeLatestTag": "最終のタグを含める",
  "loc.input.help.includeLatestTag": "Docker イメージをビルドまたはプッシュするときに、'latest' タグを組み込みます。",
  "loc.input.label.buildImages": "イメージのビルド",
  "loc.input.help.buildImages": "サービス コンテナーを開始する前に、イメージをビルドします。",
  "loc.input.label.serviceName": "サービス名",
  "loc.input.help.serviceName": "実行する特定のサービスの名前です。",
  "loc.input.label.containerName": "コンテナー名 ",
  "loc.input.help.containerName": "実行する特定のサービス コンテナーの名前です。",
  "loc.input.label.ports": "ポート",
  "loc.input.help.ports": "ホストに公開する特定のサービス コンテナーのポートです。ホスト ポート:コンテナー ポートのバインドを新しい行ごとに指定します。",
  "loc.input.label.workDir": "作業ディレクトリ",
  "loc.input.help.workDir": "特定のサービス コンテナーの作業ディレクトリです。",
  "loc.input.label.entrypoint": "エントリ ポイントのオーバーライド",
  "loc.input.help.entrypoint": "特定のサービス コンテナーの既定のエントリ ポイントをオーバーライドします。",
  "loc.input.label.containerCommand": "コマンド",
  "loc.input.help.containerCommand": "特定のサービス コンテナー内で実行するコマンドです。たとえば、イメージに単純な Python Flask Web アプリケーションが含まれている場合は、'python app.py' を指定して Web アプリケーションを起動することができます。",
  "loc.input.label.detached": "バックグラウンドで実行",
  "loc.input.help.detached": "バックグラウンドでサービス コンテナーを実行します。",
  "loc.input.label.abortOnContainerExit": "コンテナーの終了時に中止する",
  "loc.input.help.abortOnContainerExit": "いずれかのコンテナーが終了したとき、すべてのコンテナーを停止します。",
  "loc.input.label.imageDigestComposeFile": "イメージ ダイジェスト Compose ファイル",
  "loc.input.help.imageDigestComposeFile": "各サービスの Docker イメージのフル イメージ リポジトリのダイジェストを設定して作成された Docker Compose ファイルへのパスです。",
  "loc.input.label.removeBuildOptions": "ビルド オプションの削除",
  "loc.input.help.removeBuildOptions": "出力 Docker Compose ファイルからビルド オプションを削除します。",
  "loc.input.label.baseResolveDirectory": "解決用のベース ディレクトリ",
  "loc.input.help.baseResolveDirectory": "出力 Docker Compose ファイル内の相対パスを解決するためのベース ディレクトリです。",
  "loc.input.label.outputDockerComposeFile": "出力 Docker Compose ファイル",
  "loc.input.help.outputDockerComposeFile": "出力 Docker Compose ファイルへのパスです。",
  "loc.input.label.dockerComposeCommand": "コマンド",
  "loc.input.help.dockerComposeCommand": "実行する Docker Compose コマンド (引数付き) です。たとえば、すべての停止しているサービス コンテナーを削除するには、'rm --all' と入力します。",
  "loc.input.label.arguments": "引数",
  "loc.input.help.arguments": "Docker Compose command options. Ex:<br> For build command,<br>--pull --compress --parallel",
  "loc.input.label.dockerHostEndpoint": "Docker ホスト サービス接続",
  "loc.input.help.dockerHostEndpoint": "Docker ホスト サービス接続を選択します。既定では、エージェントのホストになります。",
  "loc.input.label.nopIfNoDockerComposeFile": "Docker Compose ファイルが存在しなければ操作なし",
  "loc.input.help.nopIfNoDockerComposeFile": "Docker Compose ファイルが存在しない場合に、このタスクをスキップします。これは、リポジトリ内に Docker Compose ファイルがあるかどうかに基づいて省略可能な動作を提供するタスクの場合に役立ちます。",
  "loc.input.label.requireAdditionalDockerComposeFiles": "追加の Docker Compose ファイルを必須にする",
  "loc.input.help.requireAdditionalDockerComposeFiles": "追加の Docker Compose ファイルが存在しない場合に、エラーを生成します。これは、ファイルが存在しない場合にそのファイルを無視するという既定の動作をオーバーライドします。",
  "loc.input.label.cwd": "作業ディレクトリ",
  "loc.input.help.cwd": "Docker Compose コマンドの作業ディレクトリです。",
  "loc.messages.ConnectingToDockerHost": "DOCKER_HOST variable is set. Docker will try to connect to the Docker host: %s",
  "loc.messages.ContainerPatternFound": "docker compose filepath パラメーターにパターンが見つかりました",
  "loc.messages.ContainerPatternNotFound": "docker compose filepath パラメーターにパターンが見つかりませんでした ",
  "loc.messages.ContainerDockerFileNotFound": "%s に一致する Docker ファイルは見つかりませんでした。",
  "loc.messages.AdditionalDockerComposeFileDoesNotExists": "追加の Docker Compose ファイル %s は存在しません。",
  "loc.messages.CantWriteDataToFile": "ファイル %s にデータを書き込めません。エラー: %s",
  "loc.messages.DockerHostVariableWarning": "DOCKER_HOST variable is set. Please ensure that the Docker daemon is running on: %s",
  "loc.messages.NoDataWrittenOnFile": "ファイル %s にデータが書き込まれませんでした",
  "loc.messages.FileContentSynced": "ファイルの内容がディスクに同期されました。内容は %s です。",
  "loc.messages.ImageNameWithoutTag": "イメージ名がタグに指定されていません。指定されたイメージのすべてのタグをプッシュしています。",
  "loc.messages.WritingDockerConfigToTempFile": "Docker 構成を一時ファイルに書き込んでいます。ファイル パス: %s、Docker 構成: %s"
}