{
    "id": "5e1e3830-fbfb-11e5-aab1-090c92bc4988",
    "name": "ExtractFiles",
    "friendlyName": "Extract files",
    "description": "Extract a variety of archive and compression files such as .7z, .rar, .tar.gz, and .zip",
    "author": "Microsoft Corporation",
    "helpUrl": "https://docs.microsoft.com/azure/devops/pipelines/tasks/utility/extract-files",
    "helpMarkDown": "[Learn more about this task](https://go.microsoft.com/fwlink/?LinkId=800269)",
    "category": "Utility",
    "visibility": [
        "Build",
        "Release"
    ],
    "runsOn": [
        "Agent",
        "DeploymentGroup"
    ],
    "demands": [],
    "minimumAgentVersion": "2.182.1",
    "version": {
        "Major": 1,
        "Minor": 189,
        "Patch": 0
    },
    "instanceNameFormat": "Extract files $(message)",
    "inputs": [
        {
            "name": "archiveFilePatterns",
            "type": "multiLine",
            "label": "Archive file patterns",
            "defaultValue": "**/*.zip",
            "required": true,
            "helpMarkDown": "File paths or patterns of the archive files to extract.  Supports multiple lines of minimatch patterns.  [More Information](https://go.microsoft.com/fwlink/?LinkId=800269)",
            "properties": {
                "resizable": "true",
                "rows": "4"
            }
        },
        {
            "name": "destinationFolder",
            "type": "filePath",
            "label": "Destination folder",
            "defaultValue": "",
            "required": true,
            "helpMarkDown": "Destination folder into which archive files should be extracted.  Use [variables](https://go.microsoft.com/fwlink/?LinkID=550988) if files are not in the repo. Example: $(agent.builddirectory)"
        },
        {
            "name": "cleanDestinationFolder",
            "type": "boolean",
            "label": "Clean destination folder before extracting",
            "required": true,
            "defaultValue": "true",
            "helpMarkDown": "Select this option to clean the destination directory before archive contents are extracted into it."
        },
        {
            "name": "overwriteExistingFiles",
            "type": "boolean",
            "label": "Overwrite existing files",
            "required": true,
            "defaultValue": "false",
            "helpMarkDown": "Select this option to overwrite existing files in the destination directory."
        },
        {
            "name": "pathToSevenZipTool",
            "type": "string",
            "defaultValue": "",
            "label": "Path to 7z utility",
            "required": false,
            "helpMarkDown": "You can specify custom path to 7z utility. For example, \"C:\\7z\\7z.exe\" on Windows and \"/usr/local/bin/7z\" on MacOS/Ubuntu."
        }
    ],
    "execution": {
        "Node10": {
            "target": "extractfilestask.js",
            "argumentFormat": ""
        }
    },
    "restrictions": {
        "commands": {
            "mode": "restricted"
        },
        "settableVariables": {
            "allowed": []
        }
    },
    "messages": {
        "ExtractDirFailedinFindFiles": "Specified archive: %s can not be extracted because it is a directory.",
        "ExtractNotFileFailed": "Specified archive: %s can not be extracted because it is not a file.",
        "ExtractNotAccessibleFile": "Specified archive: %s can not be extracted because it can not be accessed: %s",
        "SearchInDir": "Searching for: %s under directory: %s",
        "SearchNonExistDir": "Search failed because the specified search directory: %s does not exist.",
        "SearchNonDir": "Search failed because the specified search directory: %s is not a directory.",
        "NoSearchPatternPath": "No path specified for search pattern: %s defaulting to: %s",
        "ResolveRelativePath": "Relative file path: %s resolving to: %s",
        "UnzipExtractFile": "Extracting file: %s",
        "SevenZipExtractFile": "Extracting file: %s",
        "TarExtractFile": "Extracting file: %s",
        "ExtractFileFailedMsg": "Extraction failed for file: %s \ncode: %d \nstdout: %s \nstderr: %s \nerror: %s;",
        "ExtractNonExistFile": "Extraction failed for file: %s because it does not exist.",
        "ExtractDirFailed": "Extraction failed for file: %s because it is a directory.",
        "CreateTempDir": "Creating temp folder: %s to decompress: %s",
        "TempDir": "tempFolder = %s",
        "DecompressedTempTar": "Decompressed temporary tar from: %s to: %s",
        "RemoveTempDir": "Removing temp folder: %s",
        "ExtractFailedCannotCreate": "Extraction failed for file: %s because temporary location could not be created: %s",
        "NoFilesFound": "No archives were found using specified file patterns",
        "FoundFiles": "Found: %d files to extract:",
        "CleanDestDir": "Cleaning destination folder before extraction: %s",
        "CreateDestDir": "Creating destination folder: %s",
        "SucceedMsg": "Successfully extracted all files."
    }
}
