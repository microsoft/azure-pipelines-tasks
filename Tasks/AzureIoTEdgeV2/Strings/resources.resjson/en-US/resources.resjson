{
  "loc.friendlyName": "Azure IoT Edge",
  "loc.helpMarkDown": "Visit the [documentation](https://docs.microsoft.com/en-us/azure/iot-edge/how-to-continuous-integration-continuous-deployment) for help",
  "loc.description": "Build and deploy an Azure IoT Edge image",
  "loc.instanceNameFormat": "Azure IoT Edge - $(action)",
  "loc.group.displayName.advanced_push": "Advanced",
  "loc.group.displayName.advanced_deploy": "Advanced",
  "loc.input.label.action": "Action",
  "loc.input.help.action": "Select an Azure IoT Edge action.\n **Build module images** will only build modules (You can use it to check compilation error).\n **Push module images** will push modules to container registry.\n **Deploy to IoT Edge devices** will deploy the generated deployment file to IoT Hub. (We recommend to put **Deploy** task in release pipeline).",
  "loc.input.label.deploymentFilePath": "Deployment file",
  "loc.input.help.deploymentFilePath": "Select the deployment json file.\n If this task is in **release pipeline**, you need to set the location of deployment file in artifact.(The default value works for most conditions).\n If this task is in **build pipeline**, you need to set it to the path of **Path of output deployment file**.",
  "loc.input.label.connectedServiceNameARM": "Azure subscription contains IoT Hub",
  "loc.input.help.connectedServiceNameARM": "Select an **Azure subscription** that contains IoT Hub",
  "loc.input.label.iothubname": "IoT Hub name",
  "loc.input.help.iothubname": "Select the **IoT Hub**",
  "loc.input.label.deploymentid": "IoT Edge deployment ID",
  "loc.input.help.deploymentid": "Input the **IoT Edge Deployment ID**, if ID exists, it will be overridden.\n Up to 128 lowercase letters, numbers and the following characters are allowed [ -:+%_#*?!(),=@;' ].\n Check more information for [Azure IoT Edge deployment](https://docs.microsoft.com/azure/iot-edge/how-to-deploy-monitor#monitor-a-deployment)",
  "loc.input.label.priority": "IoT Edge deployment priority",
  "loc.input.help.priority": "Set the **priority** to a positive integer to resolve deployment conflicts: when targeted by multiple deployments a device will use the one with highest priority or (in case of two deployments with the same priority) latest creation time.\n Check more information for [Azure IoT Edge deployment](https://docs.microsoft.com/azure/iot-edge/how-to-deploy-monitor#monitor-a-deployment)",
  "loc.input.label.deviceOption": "Choose single/multiple device",
  "loc.input.help.deviceOption": "Choose to deploy to single or multiple(by tags) devices",
  "loc.input.label.deviceId": "IoT Edge device ID",
  "loc.input.help.deviceId": "Input the IoT Edge **device ID**",
  "loc.input.label.targetcondition": "IoT Edge device target condition",
  "loc.input.help.targetcondition": "Input the **target condition** of devices you would like to deploy. Do not use double quote. Example: **tags.building=9 and tags.environment='test'**.\n Check more information for [Azure IoT Edge deployment](https://docs.microsoft.com/azure/iot-edge/how-to-deploy-monitor#monitor-a-deployment)",
  "loc.input.label.containerregistrytype": "Container registry type",
  "loc.input.help.containerregistrytype": "Select a **Container Registry Type**.\n **Azure Container Registry** for ACR and **Generic Container Registry** for generic registries including docker hub.",
  "loc.input.label.dockerRegistryEndpoint": "Docker Registry Connection",
  "loc.input.help.dockerRegistryEndpoint": "Select a generic **Docker registry connection**. Required for **Build and Push**.",
  "loc.input.label.azureSubscriptionEndpoint": "Azure subscription",
  "loc.input.help.azureSubscriptionEndpoint": "Select an Azure subscription",
  "loc.input.label.azureContainerRegistry": "Azure Container Registry",
  "loc.input.help.azureContainerRegistry": "Select an **Azure Container Registry**",
  "loc.input.label.templateFilePath": ".template.json file",
  "loc.input.help.templateFilePath": "The path of Azure IoT Edge solution **.template.json**. This file defines the modules and routes in Azure IoT Edge solution, file name must end with **.template.json**",
  "loc.input.label.defaultPlatform": "Default platform",
  "loc.input.help.defaultPlatform": "In your **.template.json**, you can leave the modules platform unspecified. For these modules, the **default platform** will be used.",
  "loc.input.label.fillRegistryCredential": "Add registry credential to deployment manifest",
  "loc.input.help.fillRegistryCredential": "Add registry credential for pushing docker images to deployment manifest",
  "loc.input.label.deploymentManifestOutputPath": "Output path",
  "loc.input.help.deploymentManifestOutputPath": "The output path of generated deployment manifest",
  "loc.input.label.validateGeneratedDeploymentManifest": "Validate the schema of generated deployment manifest",
  "loc.input.help.validateGeneratedDeploymentManifest": "Fail this step if the generated deployment manifest does not pass schema validation. You can search `Azure IoT Edge deployment` in [JSON Schema Store](http://schemastore.org/json/) to find latest schema.",
  "loc.input.label.bypassModules": "Bypass module(s)",
  "loc.input.help.bypassModules": "Select the module(s) that you **DO NOT** need to build(or push) in the .template.json, specify module names and separate with comma.\n Example: if you have 2 modules **SampleModule1,SampleModule2** in your .template.json, you want to just build or push **SampleModule1**, then you set the bypass modules as **SampleModule2**. Leave empty if you would like to build all the modules in .template.json.",
  "loc.messages.BuildingModules": "Building module images...",
  "loc.messages.BuildingModulesFinished": "Finished building module images",
  "loc.messages.PushingModules": "Pushing module images...",
  "loc.messages.PushingModulesFinished": "Finished pushing module images",
  "loc.messages.StartDeploy": "Start deploying...",
  "loc.messages.FinishDeploy": "Finished Deploying",
  "loc.messages.DeploymentFilePath": "The generated deployment file located in the path: %s",
  "loc.messages.ExpandingRegistryCredentials": "Expanding registry credentials in deployment file...",
  "loc.messages.ReplaceCredential": "Replace credential: %s",
  "loc.messages.DeployTaskRunningInBuild": "Deployment task is running in build pipeline? %s",
  "loc.messages.CheckValidJson": "Checking if the following file is a valid json: %s",
  "loc.messages.Invalid": "Invalid",
  "loc.messages.Valid": "Valid",
  "loc.messages.NomralizedDeployementId": "Normalized deployment id is: %s",
  "loc.messages.DependencyAlreadyInstalled": "%s already installed with version: %s",
  "loc.messages.DependencyInstallSuccess": "%s installed with version: %s",
  "loc.messages.DependencyInstallFail": "%s installation failed, see detailed error in debug mode",
  "loc.messages.TemplateFileInvalid": "The path of template file is not valid: %s",
  "loc.messages.InvalidContainerRegistry": "Failed to fetch container registry authentication token, please check you container registry setting in build task. The username for container registry is %s",
  "loc.messages.DeploymentFileNotFound": "Deployment file can't be found. Please ensure Path of deployment file is correctly set in the task.",
  "loc.messages.ValidDeploymentFileNotFound": "Cannot find a valid deployment file. Please ensure Path of deployment file is correctly set in the task.",
  "loc.messages.AzureSdkNotFound": "Azure SDK not found",
  "loc.messages.RootPathNotExist": "The Root path %s does not exist",
  "loc.messages.SkipModuleImageValidation": "SKIP_MODULE_IMAGE_VALIDATION set to true, skipping module image validation.",
  "loc.messages.InvalidRegistryCredentialWarning": "Failed to login %s with given credential. %s",
  "loc.messages.CheckModuleImageExistenceError": "%s does not exist or the credential is not set correctly. Error: %s",
  "loc.messages.StartGenerateDeploymentManifest": "Start generating deployment manifest...",
  "loc.messages.FinishGenerateDeploymentManifest": "Finished generating deployment manifest.",
  "loc.messages.LoginRegistrySucess": "Successfully logged in to registry %s",
  "loc.messages.SkipSettingEnvironmentVariableForSecret": "Environment variable %s already exist. Skip setting environment varialbe for secret: %s."
}