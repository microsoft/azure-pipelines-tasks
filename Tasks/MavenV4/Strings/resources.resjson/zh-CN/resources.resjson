{
  "loc.friendlyName": "Maven",
  "loc.helpMarkDown": "[详细了解此任务](https://go.microsoft.com/fwlink/?LinkID=613723)或[参阅 Maven 文档](http://maven.apache.org/guides/index.html)",
  "loc.description": "使用 Apache Maven 生成、测试和部署",
  "loc.instanceNameFormat": "Maven $(mavenPOMFile)",
  "loc.releaseNotes": "在“准备分析配置”任务中，已将 SonarQube 分析的配置移至 [SonarQube](https://marketplace.visualstudio.com/items?itemName=SonarSource.sonarqube)或 [SonarCloud](https://marketplace.visualstudio.com/items?itemName=SonarSource.sonarcloud)扩展",
  "loc.group.displayName.junitTestResults": "JUnit 测试结果",
  "loc.group.displayName.codeCoverage": "代码覆盖率",
  "loc.group.displayName.advanced": "高级",
  "loc.group.displayName.CodeAnalysis": "代码分析",
  "loc.input.label.mavenPOMFile": "Maven POM 文件",
  "loc.input.help.mavenPOMFile": "从存储库根路径到 Maven POM 文件的相对路径。",
  "loc.input.label.goals": "目标",
  "loc.input.label.options": "选项",
  "loc.input.label.publishJUnitResults": "发布到 Azure Pipelines",
  "loc.input.help.publishJUnitResults": "选择此选项可将 Maven 生成产生的 JUnit 测试结果发布到 Azure Pipelines。每个与 `Test Results Files` 匹配的测试结果文件都会在 Azure Pipelines 中发布为测试运行。",
  "loc.input.label.testResultsFiles": "测试结果文件",
  "loc.input.help.testResultsFiles": "指定要发布的测试结果文件的路径和模式。可以使用通配符([详细信息](https://go.microsoft.com/fwlink/?linkid=856077))。例如，\"**/TEST-*.xml\" 表示名称以 \"TEST-\" 开头的所有 XML 文件。如果未指定根路径，则在默认工作目录下匹配文件，其值可通过变量 $(System.DefaultWorkingDirectory) 获取。例如，\"**/TEST-*.xml\" 值会通过 \"$(System.DefaultWorkingDirectory)/**/TEST-*.xml\" 获取匹配的文件。",
  "loc.input.label.testRunTitle": "测试运行标题",
  "loc.input.help.testRunTitle": "为测试运行提供一个名称。",
  "loc.input.label.allowBrokenSymbolicLinks": "允许中断的符号链接",
  "loc.input.help.allowBrokenSymbolicLinks": "发布测试结果期间，当任务查找中断的符号链接时，将设置为 false 以使生成失败",
  "loc.input.label.codeCoverageTool": "代码覆盖率工具",
  "loc.input.help.codeCoverageTool": "选择代码覆盖率工具。",
  "loc.input.label.classFilter": "类包含/排除筛选器",
  "loc.input.help.classFilter": "用于在收集代码覆盖率时包含或排除类的筛选器列表，以逗号分隔。例如: +:com.*、+:org.*、-:my.app*.*。",
  "loc.input.label.classFilesDirectories": "类文件目录",
  "loc.input.help.classFilesDirectories": "此字段是多模块项目的必填字段。指定从 Maven POM 文件到目录的相对路径的列表，以逗号分隔，其中目录包含类文件和存档文件(JAR 和 WAR 等)。报告这些目录中类文件的代码覆盖率。例如: target/classes,target/testClasses。",
  "loc.input.label.srcDirectories": "源文件目录",
  "loc.input.help.srcDirectories": "此字段是多模块项目的必需字段。指定从 Maven POM 文件到源代码目录的相对路径列表(以逗号分隔)。代码覆盖率报表将使用这些路径来突出显示源代码。例如: src/java,src/Test。",
  "loc.input.label.failIfCoverageEmpty": "缺失代码覆盖率结果时失败",
  "loc.input.help.failIfCoverageEmpty": "如果代码覆盖率未产生任何要发布的结果，则生成将失败。",
  "loc.input.label.restoreOriginalPomXml": "执行任务后还原原始 pom.xml",
  "loc.input.help.restoreOriginalPomXml": "代码覆盖率修改 pom.xml 后可产生结果。如果需要保留原始 pom.xml，请使用此选项。",
  "loc.input.label.javaHomeSelection": "JAVA_HOME 设置方法",
  "loc.input.help.javaHomeSelection": "可通过选择将在生成期间发现的 JDK 版本或手动输入 JDK 路径来设置 JAVA_HOME。",
  "loc.input.label.jdkVersion": "JDK 版本",
  "loc.input.help.jdkVersion": "将尝试发现所选 JDK 版本的路径并相应地设置 JAVA_HOME。",
  "loc.input.label.jdkUserInputPath": "JDK 路径",
  "loc.input.help.jdkUserInputPath": "将 JAVA_HOME 设置到给定路径。",
  "loc.input.label.jdkArchitecture": "JDK 体系结构",
  "loc.input.help.jdkArchitecture": "可以选择提供 JDK 的体系结构(x86、x64)。",
  "loc.input.label.mavenVersionSelection": "Maven 版本",
  "loc.input.help.mavenVersionSelection": "使用默认的 Maven 版本或指定自定义路径下的版本。",
  "loc.input.label.mavenPath": "Maven 路径",
  "loc.input.help.mavenPath": "将自定义路径提供给 Maven 安装(如 /usr/share/maven)。",
  "loc.input.label.mavenSetM2Home": "设置 M2_HOME 变量",
  "loc.input.help.mavenSetM2Home": "将 M2_HOME 变量设置为自定义 Maven 安装路径。",
  "loc.input.label.mavenOpts": "将 MAVEN_OPTS 设置为",
  "loc.input.help.mavenOpts": "设置 MAVEN_OPTS 环境变量，此变量将用于发送命令行参数以启动 JVM。-Xmx 标志指定 JVM 可用的最大内存。",
  "loc.input.label.mavenFeedAuthenticate": "对内置 Maven 源进行身份验证",
  "loc.input.help.mavenFeedAuthenticate": "自动对 Azure Artifacts 中的内置 Maven 源进行验证。如果未使用内置 Maven 源，请取消选择该选项，以便更快生成。",
  "loc.input.label.skipEffectivePom": "对内置源进行身份验证时跳过生成有效 POM",
  "loc.input.help.skipEffectivePom": "仅使用 POM 对内置 Maven 源进行身份验证，从而允许 Azure Artifacts/Azure DevOps Server [包管理]源中的父 POM。",
  "loc.input.label.sqAnalysisEnabled": "运行 SonarQube 或 SonarCloud 分析",
  "loc.input.help.sqAnalysisEnabled": "此选项已从 **Maven** 任务的版本 1 更改为使用[SonarQube](https://marketplace.visualstudio.com/items?itemName=SonarSource.sonarqube)和[SonarCloud](https://marketplace.visualstudio.com/items?itemName=SonarSource.sonarcloud)市场扩展。启用此选项，在执行 **目标** 字段中的目标后运行[SonarQube 或 SonarCloud 分析](http://redirect.sonarsource.com/doc/install-configure-scanner-tfs-ts.html)。须首先运行 **安装** 或 **包** 目标。还必须在此 Maven 任务之前将其中一个扩展的 **准备分析配置** 任务添加到生成管道 。",
  "loc.input.label.isJacocoCoverageReportXML": "使用 XML Jacoco 报告进行 SonarQube 分析",
  "loc.input.help.isJacocoCoverageReportXML": "使用 XML Jacoco 报告进行 SonarQube 分析。[详细信息](https://docs.sonarqube.org/latest/analysis/coverage/)",
  "loc.input.label.sqMavenPluginVersionChoice": "Maven 版本的 SonarQube 扫描仪",
  "loc.input.help.sqMavenPluginVersionChoice": "要使用的 SonarQube Maven 插件版本。可以使用最新版本，或依赖于 pom.xml 中的版本。",
  "loc.input.label.checkstyleAnalysisEnabled": "运行 Checkstyle",
  "loc.input.help.checkstyleAnalysisEnabled": "使用默认 Sun 检查运行 Checkstyle 工具。将结果上传为生成项目。",
  "loc.input.label.pmdAnalysisEnabled": "运行 PMD",
  "loc.input.help.pmdAnalysisEnabled": "使用 PMD 静态分析工具查找代码中的 bug。结果将作为生成项目进行上传。",
  "loc.input.label.findbugsAnalysisEnabled": "运行 FindBugs",
  "loc.input.help.findbugsAnalysisEnabled": "使用 FindBugs 静态分析工具查找代码中的 bug。结果将作为生成项目进行上传。",
  "loc.messages.sqCommon_CreateTaskReport_MissingField": "未能创建 TaskReport 对象。缺少字段: %s",
  "loc.messages.sqCommon_WaitingForAnalysis": "正在等待 SonarQube 服务器分析生成。",
  "loc.messages.sqCommon_NotWaitingForAnalysis": "生成未配置等待 SonarQube 分析。详细的质量检验关状态不可用。",
  "loc.messages.sqCommon_QualityGateStatusUnknown": "无法检测质量检验关状态，或已引入新的状态。",
  "loc.messages.sqCommon_InvalidResponseFromServer": "从服务器返回了无效的或意外的响应格式。",
  "loc.messages.codeAnalysis_ToolIsEnabled": "%s 分析已启用。",
  "loc.messages.codeAnalysis_ToolFailed": "%s 分析失败。",
  "loc.messages.sqAnalysis_IncrementalMode": "检测到 PR 生成 - 在增量模式下运行 SonarQube 分析",
  "loc.messages.sqAnalysis_BuildSummaryTitle": "SonarQube 分析报表",
  "loc.messages.sqAnalysis_TaskReportInvalid": "任务报表无效或丢失。请检查 SonarQube 是否成功完成。",
  "loc.messages.sqAnalysis_BuildSummary_LinkText": "详细的 SonarQube 报表",
  "loc.messages.sqAnalysis_BuildSummary_CannotAuthenticate": "无法对 SonarQube 服务器进行验证。请查看已保存的服务连接详细信息和该服务器的状态。",
  "loc.messages.sqAnalysis_AnalysisTimeout": "未在分配的时间(%d 秒)内完成分析。",
  "loc.messages.sqAnalysis_IsPullRequest_SkippingBuildSummary": "拉取请求生成: 详细的 SonarQube 生成摘要不可用。",
  "loc.messages.sqAnalysis_IsPullRequest_SkippingBuildBreaker": "拉取请求生成: 生成不会因质量检验关问题而断开。",
  "loc.messages.sqAnalysis_BuildBrokenDueToQualityGateFailure": "与此生成关联的 SonarQube 质量检验关出现问题。",
  "loc.messages.sqAnalysis_QualityGatePassed": "已通过与此生成关联的 SonarQube 质量检验关(状态 %s)",
  "loc.messages.sqAnalysis_UnknownComparatorString": "SonarQube 生成摘要遇到了问题: 未知的比较运算符“%s”",
  "loc.messages.sqAnalysis_NoUnitsFound": "无法从服务器检索 SonarQube 度量单位列表。",
  "loc.messages.sqAnalysis_NoReportTask": "无法找到 report-task.txt。可能的原因: SonarQube 分析未成功完成。",
  "loc.messages.sqAnalysis_MultipleReportTasks": "找到了多个 report-task.txt 文件。选择第一个文件。生成摘要和生成断裂可能不正确。可能的原因: 同一生成中存在多个 SonarQube 分析，这种情况不受支持。",
  "loc.messages.codeAnalysisBuildSummaryLine_SomeViolationsSomeFiles": "%s 发现 %d 个冲突存在于 %d 个文件中。",
  "loc.messages.codeAnalysisBuildSummaryLine_SomeViolationsOneFile": "%s 发现 %d 个冲突存在于 1 个文件中。",
  "loc.messages.codeAnalysisBuildSummaryLine_OneViolationOneFile": "%s 发现 1 个冲突存在于 1 个文件中。",
  "loc.messages.codeAnalysisBuildSummaryLine_NoViolations": "%s 未发现任何冲突。",
  "loc.messages.codeAnalysisBuildSummaryTitle": "代码分析报告",
  "loc.messages.codeAnalysisArtifactSummaryTitle": "代码分析结果",
  "loc.messages.codeAnalysisDisabled": "代码分析在生成环境外被禁用。无法找到 %s 的值",
  "loc.messages.LocateJVMBasedOnVersionAndArch": "为 Java %s %s 查找 JAVA_HOME",
  "loc.messages.UnsupportedJdkWarning": "JDK 9 和 JDK 10 不受支持。请切换到项目和管道中的更高版本。正在尝试使用 JDK 11 进行生成...",
  "loc.messages.FailedToLocateSpecifiedJVM": "未能找到指定的 JDK 版本。请确保代理上安装了指定的 JDK 版本，环境变量“%s”存在并设置为对应 JDK 的位置或使用[Java 工具安装程序](https://go.microsoft.com/fwlink/?linkid=875287)任务安装所需 JDK。",
  "loc.messages.NoCodeCoverage": "未找到可发布的代码覆盖率结果。",
  "loc.messages.EntryAlreadyExists": "xml 文件中已存在源或储存库的设置。",
  "loc.messages.EffectivePomInvalid": "无法分析有效 POM。",
  "loc.messages.AuthenticationNotNecessary": "未找到需要进行身份验证的内置 Maven 源。禁用“对内置 Maven 源进行身份验证”以便更快生成。",
  "loc.messages.UsingAuthFeed": "使用内置源: ",
  "loc.messages.NoTestResults": "未找到匹配 %s 的测试结果文件，因此将跳过发布 JUnit 测试结果。"
}