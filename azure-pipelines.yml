trigger:
- master
- releases/*

resources:
  repositories:
  - repository: AzureDevOps
    type: git
    endpoint: AzureDevOps
    name: AzureDevOps/AzureDevOps

  - repository: ConfigChange
    type: git
    endpoint: AzureDevOps
    name: AzureDevOps/AzureDevOps.ConfigChange

parameters:
- name: build_single_task
  displayName: Build Single Task
  type: boolean
  default: false
- name: task_name
  displayName: Task Name (List of tasks to build (e.g. BashV3 [, AzureCLIV1]))
  type: string
  default: TaskNameVN
- name: push_to_feed
  displayName: Push to Feed
  type: boolean
  default: false
- name: generate_prs
  displayName: Create hotfix PRs and Release
  type: boolean
  default: false
- name: deploy_all_tasks
  displayName: Build all tasks for deployment
  type: boolean
  default: false

variables:
  currentDate: $[ format('{0:yyyy}{0:MM}{0:dd}', pipeline.startTime) ]
  taskName: ${{ parameters.task_name }}
  taskNameIsSet: ${{ not(eq(parameters.task_name, 'TaskNameVN')) }}
  isHotfix: ${{ and(eq(parameters.push_to_feed, true), eq(variables.taskNameIsSet, true)) }}

jobs:

- ${{ if parameters.build_single_task }}:

  - template: ci/build-single-jobs.yml
    parameters:
      task_name: ${{ parameters.task_name }}
      push_to_feed: ${{ parameters.push_to_feed }}
      generate_prs: ${{ parameters.generate_prs }}

- ${{ if not(parameters.build_single_task) }}:

  # All tasks on Windows
  - job: build_all_windows
    displayName: Build all tasks (Windows)
    condition: eq(variables.os, 'Windows_NT')
    timeoutInMinutes: 180
    pool:
      vmImage: windows-2022
    steps:
    - template: ci/build-all-steps.yml
      parameters:
        os: Windows_NT

  # Publish
  - job: publish
    displayName: Publish
    dependsOn:
    - build_all_windows
    condition: and(succeeded(), ne(variables['build.reason'], 'PullRequest'))
    pool:
      vmImage: windows-2022
    steps:
    - template: ci/publish-steps.yml

  # Courtesy Push
  - job: courtesy_push
    displayName: Courtesy Push
    dependsOn:
    - publish
    condition: |
      and(
        succeeded(),
        eq(variables['COURTESY_PUSH'], 'true'),
        or(
          eq(variables['build.reason'], 'Schedule'),
          and(
            eq(variables['build.reason'], 'Manual'),
            eq(variables['FORCE_COURTESY_PUSH'], 'true')
          )
        )
      )
    pool:
      vmImage: windows-2022
    steps:
    - checkout: AzureDevOps
      fetchDepth: 1
      persistCredentials: true
    - checkout: self
    - template: ci/courtesy-push.yml

  - job: build_all_tasks_for_deployments
    displayName: Build all tasks for deployments (Windows)
    dependsOn:
    - courtesy_push
    - build_all_windows
    condition: succeeded()
    timeoutInMinutes: 180
    variables:
      task_pattern: $[dependencies.build_all_windows.outputs['getTaskPattern.task_pattern']]
    pool:
      name: 1ES-Shared-Hosted-Pool_Windows-Server-2022
    steps:
    - template: ci/build-all-tasks.yml
      parameters:
        deploy_all_tasks: ${{ parameters.deploy_all_tasks }}

  # All tasks on Linux
  - job: build_all_linux
    displayName: Build all tasks (Linux)
    condition: eq(variables.os, 'Linux')
    timeoutInMinutes: 180
    pool:
      vmImage: ubuntu-20.04
    steps:
    - template: ci/build-all-steps.yml
      parameters:
        os: Linux

  # All tasks on macOS
  - job: build_all_darwin
    displayName: Build all tasks (macOS)
    condition: eq(variables.os, 'Darwin')
    timeoutInMinutes: 180
    pool:
      vmImage: macos-11
    steps:
    - template: ci/build-all-steps.yml
      parameters:
        os: Darwin
